@page "/"

@inject HttpClient Http
@inject PublicHttpClient PublicHttp

<PageTitle>Dashboard</PageTitle>

<AuthorizeView>
<Authorized>
<div id="content">
<div class="container-fluid mb-5">
<div class="d-sm-flex justify-content-between align-items-center mb-4">
    <h3 class="text-dark mb-0">Dashboard</h3>
</div>
<!-- Active tournaments -->
<div class="row">
    <div class="col">
        <div class="card shadow m-2">
            <div class="card-header">
                <div class="row d-lg-flex align-items-lg-center">
                    <div class="col">
                    <h6 class="text-primary mb-0">Your ongoing tournaments</h6>
                    </div>
                    <!-- <div class="col text-end"><a href="/Tournament/List" class="btn btn-primary btn-sm">Show all</a></div> -->
                </div>
            </div>
            <div class="card-body">
                @if (_tournamentsActive is null)
                {
                    <p class="text-center fw-bold">Loading...</p>
                }
                else if (_tournamentsActive.Count == 0)
                {
                    <p class="text-center fw-bold">No tournaments found.</p>
                }
                else
                {
                    <div class="row">
                        <div class="col-md-6 text-nowrap">
                            <div id="dataTable_length" class="dataTables_length" aria-controls="dataTable">
                                <label class="form-label">
                                    Show
                                    <select @onchange="OnItemsOnActivePageChanged" class="d-inline-block form-select form-select-sm">
                                        <option value="3" selected="selected">3</option>
                                        <option value="10">10</option>
                                        <option value="25">25</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                    </select>
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="text-md-end dataTables_filter" id="dataTable_filter">
                                <label class="form-label">
                                    <input type="text" @bind="@_activeSearch" @bind:event="oninput" class="form-control form-control-sm" placeholder="Search"/>
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive table mt-2" role="grid">
                        @if (tournamentsActiveFiltered.Count == 0)
                        {
                            <p class="text-center fw-bold">No tournaments found</p>
                        }
                        else
                        {
                            <table class="table my-0" id="dataTable">
                                <thead>
                                <tr>
                                    <th>Sport<i class="fas fa-baseball-ball pe-0 ms-2"></i></th>
                                    <th>Name</th>
                                    <th>Date</th>
                                    <th>Visibility</th>
                                    <th>Occupation</th>
                                    <th>Winner</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var tournament in tournamentsActiveFilteredPages[_activeSelectedPageIndex])
                                {
                                    <tr>
                                        <td>@(tournament.Sport?.Name ?? "Other")</td>
                                        <td>@tournament.Name</td>
                                        <td>@tournament.Date.ToString("dd. MM. yyyy")</td>
                                        <td>@(tournament.IsPublic ? "Public" : "Private")</td>
                                        <td>@_numberOfParticipantsActive[tournament.Id] / @tournament.MaxAttendees</td>
                                        <td class="text-end">
                                            <a data-bs-target="/Tournament/@tournament.Id" href="/Tournament/Detail/@tournament.Id" class="btn btn-primary">Detail</a>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        }
                    </div>
                    <div class="row">
                        @if (tournamentsActiveFiltered.Count > 0)
                        {
                            <div class="col-md-6 align-self-center">
                                <p id="dataTable_info" class="dataTables_info" role="status" aria-live="polite">
                                    Showing @(1 + _activeSelectedPageIndex * _activeShowCount) to @(_activeShowCount + _activeSelectedPageIndex * _activeShowCount < tournamentsActiveFiltered.Count ?
                                                                                                      _activeShowCount + _activeSelectedPageIndex * _activeShowCount : tournamentsActiveFiltered.Count) of @(tournamentsActiveFiltered.Count)
                                </p>
                            </div>

                            <div class="col-md-6">
                                <nav class="d-lg-flex justify-content-lg-end dataTables_paginate paging_simple_numbers">
                                    <ul class="pagination">
                                        <li class="page-item @(_activeSelectedPageIndex <= 0 ? "disabled" : "")">
                                            <a role="button" class="page-link" aria-label="Previous" @onclick="() => _activeSelectedPageIndex--">
                                                <span class="user-select-none" aria-hidden="true">«</span>
                                            </a>
                                        </li>
                                        @for (var i = _activeSelectedPageIndex - 1; i <= _activeSelectedPageIndex + 1; i++)
                                        {
                                            var num = i;
                                            if (_activeSelectedPageIndex == 0)
                                                num = i + 1; // So user cant go to page -1

                                            else if (_activeSelectedPageIndex >= tournamentsActiveFilteredPages.Count - 1)
                                                num = i - 1; // So user cant go to a page that is too high

                                            if (num > tournamentsActiveFilteredPages.Count - 1)
                                            {
                                                break; // If there are fewer than 3 pages total
                                            }
                                            if (_activeSelectedPageIndex == 1 && tournamentsActiveFilteredPages.Count == 2 && i == 0)
                                            {
                                                // If only 2 pages are available, clicking the second one would make page 0 appear
                                                // which is obviously not possible
                                                continue;
                                            }

                                            <li class="page-item @(_activeSelectedPageIndex == num ? "active" : "")">
                                                <a class="page-link" @onclick="() => _activeSelectedPageIndex = num" role="button">@(num + 1)</a>
                                            </li>
                                        }
                                        <li class="page-item @(_activeSelectedPageIndex >= tournamentsActiveFilteredPages.Count - 1 ? "disabled" : "")">
                                            <a class="page-link" aria-label="Next" @onclick="() => _activeSelectedPageIndex++" role="button">
                                                <span class="user-select-none" aria-hidden="true">»</span>
                                            </a>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<!-- Upcoming tournamnets -->
<div class="row">
    <div class="col">
        <div class="card shadow m-2">
            <div class="card-header">
                <div class="row d-lg-flex align-items-lg-center">
                    <div class="col">
                        <h6 class="text-primary mb-0">Upcoming tournaments</h6>
                    </div>
                    <div class="col text-end">
                        <a href="/Tournament/List" class="btn btn-primary btn-sm">Show all</a>
                    </div>
                </div>
            </div>
            <div class="card-body">
                @if (_tournamentsUpcoming is null)
                {
                    <p class="text-center fw-bold">Loading...</p>
                }
                else
                {
                    <div class="table-responsive table mt-2" role="grid">
                        @if (_tournamentsUpcoming.Count == 0)
                        {
                            <p class="text-center fw-bold">No tournaments found.</p>
                        }
                        else
                        {
                            <table class="table my-0" id="dataTable">
                                <thead>
                                <tr>
                                    <th>Sport<i class="fas fa-baseball-ball pe-0 ms-2"></i></th>
                                    <th>Name</th>
                                    <th>Date</th>
                                    <th>Occupation</th>
                                    <th></th>
                                </tr>
                                </thead>
                                <tbody>
                                @for (var i = 0; i < 3 && i < _tournamentsUpcoming.Count; i++)
                                {
                                    var tournament = _tournamentsUpcoming[i];
                                    <tr>
                                        <td>@tournament.Sport?.Name</td>
                                        <td>@tournament.Name</td>
                                        <td>@tournament.Date.ToString("dd. MM. yyyy")</td>
                                        <td>@_numberOfParticipantsUpcoming[tournament.Id] / @tournament.MaxAttendees</td>
                                        <td class="text-end">
                                            <a data-bs-target="/Tournament/@tournament.Id" href="/Tournament/Detail/@tournament.Id" class="btn btn-primary">Detail</a>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col">
        <div class="card shadow m-2">
            <div class="card-header">
                <div class="row">
                    <div class="col d-lg-flex align-items-lg-center">
                        <h6 class="text-primary mb-0">Your finished tournaments</h6>
                    </div>
                </div>
            </div>
            <div class="card-body">
                @if (_tournamentsFinished is null)
                {
                    <p class="text-center fw-bold">Loading...</p>
                }
                else if (_tournamentsFinished.Count == 0)
                {
                    <p class="text-center fw-bold">No tournaments found.</p>
                }
                else
                {
                    <div class="row">
                        <div class="col-md-6 text-nowrap">
                            <div id="dataTable_length" class="dataTables_length" aria-controls="dataTable">
                                <label class="form-label">
                                    Show
                                    <select @onchange="OnItemsOnFinishedPageChanged" class="d-inline-block form-select form-select-sm">
                                        <option value="3" selected="selected">3</option>
                                        <option value="10">10</option>
                                        <option value="25">25</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                    </select>
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="text-md-end dataTables_filter" id="dataTable_filter">
                                <label class="form-label">
                                    <input type="text" @bind="@_finishedSearch" @bind:event="oninput" class="form-control form-control-sm" placeholder="Search"/>
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive table mt-2" role="grid">
                        @if (tournamentsFinishedFiltered.Count == 0)
                        {
                            <p class="text-center fw-bold">No tournaments found</p>
                        }
                        else
                        {
                            <table class="table my-0" id="dataTable">
                                <thead>
                                <tr>
                                    <th>Sport<i class="fas fa-baseball-ball pe-0 ms-2"></i></th>
                                    <th>Name</th>
                                    <th>Date</th>
                                    <th>Visibility</th>
                                    <th>Occupation</th>
                                    <th>Winner</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var tournament in tournamentsFinishedFilteredPages[_finishedSelectedPageIndex])
                                {
                                    <tr>
                                        <td>@(tournament.Sport?.Name ?? "Other")</td>
                                        <td>@tournament.Name</td>
                                        <td>@tournament.Date.ToString("dd. MM. yyyy")</td>
                                        <td>@(tournament.IsPublic ? "Public" : "Private")</td>
                                        <td>@_numberOfParticipantsFinished[tournament.Id] / @tournament.MaxAttendees</td>
                                        <td class="text-end">
                                            <a data-bs-target="/Tournament/@tournament.Id" href="/Tournament/Detail/@tournament.Id" class="btn btn-primary">Detail</a>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        }
                    </div>
                    <div class="row">
                        @if (tournamentsFinishedFiltered.Count > 0)
                        {
                            <div class="col-md-6 align-self-center">
                                <p id="dataTable_info" class="dataTables_info" role="status" aria-live="polite">
                                    Showing @(1 + _finishedSelectedPageIndex * _finishedShowCount) to @(_finishedShowCount + _finishedSelectedPageIndex * _finishedShowCount < tournamentsFinishedFiltered.Count ?
                                                                                                          _finishedShowCount + _finishedSelectedPageIndex * _finishedShowCount : tournamentsFinishedFiltered.Count) of @(tournamentsFinishedFiltered.Count)
                                </p>
                            </div>

                            <div class="col-md-6">
                                <nav class="d-lg-flex justify-content-lg-end dataTables_paginate paging_simple_numbers">
                                    <ul class="pagination">
                                        <li class="page-item @(_finishedSelectedPageIndex <= 0 ? "disabled" : "")">
                                            <a role="button" class="page-link" aria-label="Previous" @onclick="() => _finishedSelectedPageIndex--">
                                                <span class="user-select-none" aria-hidden="true">«</span>
                                            </a>
                                        </li>
                                        @for (var i = _finishedSelectedPageIndex - 1; i <= _finishedSelectedPageIndex + 1; i++)
                                        {
                                            var num = i;
                                            if (_finishedSelectedPageIndex == 0)
                                                num = i + 1; // So user cant go to page -1

                                            else if (_finishedSelectedPageIndex >= tournamentsFinishedFilteredPages.Count - 1)
                                                num = i - 1; // So user cant go to a page that is too high

                                            if (num > tournamentsFinishedFilteredPages.Count - 1)
                                            {
                                                break; // If there are fewer than 3 pages total
                                            }
                                            if (_finishedSelectedPageIndex == 1 && tournamentsFinishedFilteredPages.Count == 2 && i == 0)
                                            {
                                                // If only 2 pages are available, clicking the second one would make page 0 appear
                                                // which is obviously not possible
                                                continue;
                                            }

                                            <li class="page-item @(_finishedSelectedPageIndex == num ? "active" : "")">
                                                <a class="page-link" @onclick="() => _finishedSelectedPageIndex = num" role="button">@(num + 1)</a>
                                            </li>
                                        }
                                        <li class="page-item @(_finishedSelectedPageIndex >= tournamentsFinishedFilteredPages.Count - 1 ? "disabled" : "")">
                                            <a class="page-link" aria-label="Next" @onclick="() => _finishedSelectedPageIndex++" role="button">
                                                <span class="user-select-none" aria-hidden="true">»</span>
                                            </a>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>
</div>
</div>
</Authorized>
<NotAuthorized>
    <div id="content">
        <div class="container-fluid mb-5">
            <div class="d-sm-flex justify-content-between align-items-center mb-4">
                <h3 class="text-dark mb-0">Dashboard</h3>
            </div>
            <div class="row">
                <div class="col">
                    <div class="card shadow m-2">
                        <div class="card-header">
                            <div class="row d-lg-flex align-items-lg-center">
                                <div class="col">
                                    <h6 class="text-primary mb-0">Upcoming tournaments</h6>
                                </div>
                                <div class="col text-end">
                                    <a href="/Tournament/List" class="btn btn-primary btn-sm">Show all</a>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            @if (_tournamentsUpcoming is null)
                            {
                                <p class="text-center fw-bold">Loading...</p>
                            }
                            else
                            {
                                <div class="table-responsive table mt-2" role="grid">
                                    @if (_tournamentsUpcoming.Count == 0)
                                    {
                                        <p class="text-center fw-bold">No tournaments found.</p>
                                    }
                                    else
                                    {
                                        <table class="table my-0" id="dataTable">
                                            <thead>
                                            <tr>
                                                <th>Sport<i class="fas fa-baseball-ball pe-0 ms-2"></i></th>
                                                <th>Name</th>
                                                <th>Date</th>
                                                <th>Occupation</th>
                                                <th></th>
                                            </tr>
                                            </thead>
                                            <tbody>
                                            @for (var i = 0; i < 5 && i < _tournamentsUpcoming.Count; i++)
                                            {
                                                var tournament = _tournamentsUpcoming[i];
                                                <tr>
                                                    <td>@tournament.Sport?.Name</td>
                                                    <td>@tournament.Name</td>
                                                    <td>@tournament.Date.ToString("dd. MM. yyyy")</td>
                                                    <td>@_numberOfParticipantsUpcoming[tournament.Id] / @tournament.MaxAttendees</td>
                                                    <td class="text-end">
                                                        <a data-bs-target="/Tournament/@tournament.Id" href="/Tournament/Detail/@tournament.Id" class="btn btn-primary">Detail</a>
                                                    </td>
                                                </tr>
                                            }
                                            </tbody>
                                        </table>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="card shadow m-2">
                        <div class="card-header">
                            <div class="row d-lg-flex align-items-lg-center">
                                <div class="col">
                                    <h6 class="text-primary mb-0">Best players</h6>
                                </div>
                                <!-- <div class="col text-end"><a href="/User/List" class="btn btn-primary btn-sm">Show all users</a></div> -->
                            </div>
                        </div>
                        <div class="card-body">
                            @if (_bestPlayers == null)
                            {
                                <p class="text-center fw-bold">Loading...</p>
                            }
                            else if (_bestPlayers.Count == 0)
                            {
                                <p class="text-center fw-bold">No players found.</p>
                            }
                            else
                            {
                                <div class="row">
                                    <div class="col">
                                        <div id="dataTable-2" class="table-responsive table mt-2" role="grid" aria-describedby="dataTable_info">
                                            <table id="dataTable" class="table my-0">
                                                <thead>
                                                <tr>
                                                    <th>Name</th>
                                                    <th>email</th>
                                                    <th></th>
                                                </tr>
                                                </thead>
                                                <tbody>
                                                @for (var i = 0; i < _bestPlayers.Count && i < 3; i++)
                                                {
                                                    var player = _bestPlayers[i];
                                                    <tr>
                                                        <td class="mb-0">
                                                            @if (player.ProfilePictureUrl is not null)
                                                            {
                                                                <img alt="Profile picture" class="rounded-circle me-2" width="30" height="30" src="@player.ProfilePictureUrl"/>
                                                            }
                                                            @player.FirstName @player.LastName
                                                        </td>

                                                        <td class="mb-0">@player.Email</td>
                                                        <td class="text-end">
                                                            <a href="/Profile/Detail/@player.Id" class="btn btn-primary">Detail</a>
                                                        </td>
                                                    </tr>
                                                }
                                                </tbody>
                                                <tfoot>
                                                <tr></tr>
                                                </tfoot>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</NotAuthorized>
</AuthorizeView>


@code {
    private UserModel? _currentUser;
    private List<Guid>? _currentUserTeamIds;
    private List<TournamentModel>? _tournaments;
    private List<TeamIsParticipatingModel>? _participants;

    private List<TournamentModel>? _tournamentsOfUser;
    private Dictionary<Guid, int> _numberOfParticipantsOfUser = new();


    private List<TournamentModel>? _tournamentsUpcoming;
    private readonly Dictionary<Guid, int> _numberOfParticipantsUpcoming = new();

    private List<TournamentModel>? _tournamentsActive;
    private readonly Dictionary<Guid, int> _numberOfParticipantsActive = new();

    private List<TournamentModel>? _tournamentsFinished;
    private readonly Dictionary<Guid, int> _numberOfParticipantsFinished = new();

    private List<UserModel>? _bestPlayers;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            _currentUser = await Http.GetFromJsonAsync<UserModel>("api/User/current");
            var teamMemberships = await Http.GetFromJsonAsync<List<UserIsInTeamModel>>("/api/UserIsInTeam/");
            _currentUserTeamIds = teamMemberships?.Where(m => m.UserId == _currentUser?.Id).Select(m => m.TeamId).ToList();
            var _allTeams = await Http.GetFromJsonAsync<List<TeamModel>>("api/Team");
            if (_currentUser is not null && _currentUserTeamIds is not null && _allTeams is not null)
            {
                _currentUserTeamIds.AddRange(_allTeams.Where(x => x.LeaderId == _currentUser.Id).Select(x => x.Id));
            }
        }
        catch
        {
            _currentUser = null;
        }


        if (_currentUser is null) // Not logged in
        {
            _tournaments = await PublicHttp.Client.GetFromJsonAsync<List<TournamentModel>>("api/Tournament") ?? new List<TournamentModel>();
            _participants = await PublicHttp.Client.GetFromJsonAsync<List<TeamIsParticipatingModel>>("/api/TeamIsParticipating") ?? new();
            _tournamentsUpcoming = _tournaments.Where(x => x.Date >= DateTime.Today).ToList();
            foreach (var tournament in _tournamentsUpcoming)
            {
                _numberOfParticipantsUpcoming.Add(tournament.Id, _participants.Count(x => x.TournamentId == tournament.Id && x.Approved));
            }

            var users = await PublicHttp.Client.GetFromJsonAsync<List<UserModel>>("/api/User/");
            var memberships = await PublicHttp.Client.GetFromJsonAsync<List<UserIsInTeamModel>>("/api/UserIsInTeam/");
            if (users is null || memberships is null) return;
            Dictionary<Guid, int> usersPoints = new();
            foreach (var user in users) // get points for all the users
            {
                var usersTeamsIds = memberships.Where(m => m.UserId == user.Id).Select(m => m.TeamId).ToList();
                var points = _tournaments.Where(t => t.InProgress == false && usersTeamsIds.Contains(t.WinnerTeamId ?? Guid.Empty)).Count();
                usersPoints.Add(user.Id, points);
            }
            _bestPlayers = users.OrderByDescending(u => usersPoints[u.Id]).ToList();
        }
        else // Logged user
        {
            _tournaments = await Http.GetFromJsonAsync<List<TournamentModel>>("api/Tournament") ?? new List<TournamentModel>();
            _participants = await Http.GetFromJsonAsync<List<TeamIsParticipatingModel>>("/api/TeamIsParticipating") ?? new();
            _tournamentsUpcoming = _tournaments.Where(x => x.Date >= DateTime.Today).ToList();
            foreach (var tournament in _tournamentsUpcoming)
            {
                _numberOfParticipantsUpcoming.Add(tournament.Id, _participants.Count(x => x.TournamentId == tournament.Id && x.Approved));
            }

            if (_participants is null || _currentUserTeamIds is null) return;
            _tournamentsOfUser = _tournaments?.Where(t => _participants.Any(p => p.TournamentId == t.Id && _currentUserTeamIds.Contains(p.TeamId))).ToList();

            _tournamentsFinished = _tournamentsOfUser?.Where(x => x.Date < DateTime.Now && x.InProgress == false).ToList();
            if (_tournamentsFinished is not null)
            {
                foreach (var tournament in _tournamentsFinished)
                {
                    _numberOfParticipantsFinished.Add(tournament.Id, _participants.Count(x => x.TournamentId == tournament.Id && x.Approved));
                }
            }

            _tournamentsActive = _tournamentsOfUser?.Where(t => t.InProgress).ToList();
            if (_tournamentsActive is not null)
            {
                foreach (var tournament in _tournamentsActive)
                {
                    _numberOfParticipantsActive.Add(tournament.Id, _participants.Count(x => x.TournamentId == tournament.Id && x.Approved));
                }
            }
        }
    }

    private string _finishedSearch = "";
    private int _finishedShowCount = 5;
    private int _finishedSelectedPageIndex;

    private List<TournamentModel> tournamentsFinishedFiltered => _tournamentsFinished?
        .Where(x =>
        {
            var name = x.Name.ToLower().Contains(_finishedSearch.ToLower());
            var sport = x.Sport?.Name.ToLower().Contains(_finishedSearch.ToLower()) ?? false;
            var date = x.Date.ToString("dd. MM. yyyy").Contains(_finishedSearch);
            var creatorFirstName = x.Creator?.FirstName?.ToLower().Contains(_finishedSearch.ToLower()) ?? false;
            var creatorLastName = x.Creator?.LastName?.ToLower().Contains(_finishedSearch.ToLower()) ?? false;

            return name || sport || date || creatorFirstName || creatorLastName;
        }).ToList()
                                                                 ?? new();

    private List<List<TournamentModel>> tournamentsFinishedFilteredPages => tournamentsFinishedFiltered.Select((x, i) => new // Splits the one big list into smaller lists of size _showCount
    {
        Index = i,
        Value = x
    }).GroupBy(x => x.Index / _finishedShowCount)
        .Select(x => x.Select(v => v.Value).ToList())
        .ToList();

    private void OnFinishedSearchQueryChanged(ChangeEventArgs e)
    {
        _finishedSearch = e.Value?.ToString() ?? "";
        _finishedSelectedPageIndex = 0;
    }

    private void OnItemsOnFinishedPageChanged(ChangeEventArgs e)
    {
        _finishedSelectedPageIndex = 0;
        _finishedShowCount = int.Parse(e.Value?.ToString() ?? "10");
    }

    // Active 

    private string _activeSearch = "";
    private int _activeShowCount = 5;
    private int _activeSelectedPageIndex;

    private List<TournamentModel> tournamentsActiveFiltered => _tournamentsActive?
        .Where(x =>
        {
            var name = x.Name.ToLower().Contains(_activeSearch.ToLower());
            var sport = x.Sport?.Name.ToLower().Contains(_activeSearch.ToLower()) ?? false;
            var date = x.Date.ToString("dd. MM. yyyy").Contains(_activeSearch);
            var creatorFirstName = x.Creator?.FirstName?.ToLower().Contains(_activeSearch.ToLower()) ?? false;
            var creatorLastName = x.Creator?.LastName?.ToLower().Contains(_activeSearch.ToLower()) ?? false;

            return name || sport || date || creatorFirstName || creatorLastName;
        }).ToList()
                                                               ?? new();

    private List<List<TournamentModel>> tournamentsActiveFilteredPages => tournamentsActiveFiltered.Select((x, i) => new // Splits the one big list into smaller lists of size _showCount
    {
        Index = i,
        Value = x
    }).GroupBy(x => x.Index / _activeShowCount)
        .Select(x => x.Select(v => v.Value).ToList())
        .ToList();

    private void OnActiveSearchQueryChanged(ChangeEventArgs e)
    {
        _activeSearch = e.Value?.ToString() ?? "";
        _activeSelectedPageIndex = 0;
    }

    private void OnItemsOnActivePageChanged(ChangeEventArgs e)
    {
        _activeSelectedPageIndex = 0;
        _activeShowCount = int.Parse(e.Value?.ToString() ?? "10");
    }

}