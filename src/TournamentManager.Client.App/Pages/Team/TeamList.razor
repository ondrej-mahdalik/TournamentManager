@page "/Team/List"
@using TournamentManager.Common.Models
@using TournamentManager.Client.App.Extensions
@inject PublicHttpClient PublicHttp

<PageTitle>Teams List</PageTitle>

<div id="content">
    <div class="container-fluid">
        <div class="row mb-3">
            <div class="col d-xl-flex d-flex align-items-center">
                <h3 class="text-dark d-xl-flex">Teams</h3>
            </div>
            <div class="col col-auto d-flex align-items-center"><a class="btn btn-primary" href="create.html">Create New Team</a></div>
        </div>
        <div class="card shadow">
            <div class="card-body shadow">
                @if(_teams is null)
                {
                    <p class="text-center fw-bold">Loading...</p>
                }
                else
                {
                    <div class="row">

                        <div class="col-md-6 text-nowrap">
                            <div id="dataTable_length" class="dataTables_length" aria-controls="dataTable">
                                <label class="form-label">
                                    Show
                                    <select @onchange="OnItemsOnPageChanged" class="d-inline-block form-select form-select-sm">
                                        <option value="10" selected>10</option>
                                        <option value="25">25</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                    </select>
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div id="dataTable_filter" class="text-md-end dataTables_filter">
                                <label class="form-label">
                                    <input class="form-control form-control-sm" @oninput="OnSearchQueryChanged" type="search" aria-controls="dataTable" placeholder="Search"/>
                                </label>
                            </div>
                        </div>
                    </div>
                    @if (TeamsFiltered.Count == 0)
                    {
                        <p class="text-center fw-bold">No teams found.</p>
                    }
                    else
                    {
                        <div id="dataTable" class="table-responsive table mt-2" role="grid" aria-describedby="dataTable_info">
                            <table id="dataTable" class="table my-0">
                                <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Owner</th>
                                    <th>Members</th>
                                    <th class="text-start"></th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var team in TeamsFilteredPages[_selectedPageIndex])
                                {
                                    <tr>
                                        <td class="mb-0">
                                            @if (team.LogoUrl is not null)
                                            {
                                                <img alt="Team logo" class="rounded-circle me-2" width="30" height="30" src="@team.LogoUrl"/>
                                            }
                                            @team.Name
                                        </td>
                                        <td class="mb-0">@team.Leader?.FirstName @team.Leader?.LastName</td>
                                        <td class="mb-0">@(team.Members.Count + 1) @(team.Members.Count + 1 == 1 ? "member" : "members")</td>
                                        <td class="text-end"><a data-bs-target="/Team/@team.Id" href="/Team/Detail/@team.Id"><button class="btn btn-primary" type="button">Detail</button></a></td>
                                    </tr>
                                }
                                </tbody>
                            </table>

                        </div>
                        <div class="row">
                            <div class="col-md-6 align-self-center">
                                <p id="dataTable_info" class="dataTables_info" role="status" aria-live="polite">
                                    Showing @(1 + _selectedPageIndex * _showCount) to @((_showCount + _selectedPageIndex * _showCount) < TeamsFiltered.Count ? (_showCount + _selectedPageIndex * _showCount) : TeamsFiltered.Count) of @(TeamsFiltered.Count)
                                </p>
                            </div>
                            <div class="col-md-6">
                                <nav class="d-lg-flex justify-content-lg-end dataTables_paginate paging_simple_numbers">
                                    <ul class="pagination">
                                        <li class="page-item @(_selectedPageIndex <= 0 ? "disabled" : "")"><a role="button" class="page-link" aria-label="Previous" @onclick="() => _selectedPageIndex--" ><span class="user-select-none" aria-hidden="true">«</span></a></li>
                                        @for (var i = _selectedPageIndex - 1; i <= _selectedPageIndex + 1; i++)
                                        {
                                            var num = i;
                                            if (_selectedPageIndex == 0)
                                                num = i + 1; // So user cant go to page -1
                                            else if (_selectedPageIndex >= TeamsFilteredPages.Count - 1)
                                                num = i - 1; // So user cant go to a page that is too high

                                            if (num > TeamsFilteredPages.Count - 1)
                                            {
                                                break; // If there are fewer than 3 pages total
                                            }
                                            else if (_selectedPageIndex == 1 && TeamsFilteredPages.Count == 2 && i == 0)
                                            {
                                                // If only 2 pages are available, clicking the second one would make page 0 appear
                                                // which is obviously not possible
                                                continue;
                                            }

                                            <li class="page-item @(_selectedPageIndex == num ? "active" : "")">
                                                <a class="page-link" @onclick="() => _selectedPageIndex = num" role="button">@(num + 1)</a>
                                            </li>
                                        }
                                        <li class="page-item @(_selectedPageIndex >= @TeamsFilteredPages.Count - 1 ? "disabled" : "")">
                                            <a class="page-link" aria-label="Next" @onclick="() => _selectedPageIndex++" role="button"><span class="user-select-none" aria-hidden="true">»</span></a>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<TeamModel>? _teams;
    private string _search = "";
    private int _showCount = 10;
    private int _selectedPageIndex;

    private List<TeamModel> TeamsFiltered => _teams?
        .Where(x =>
        {
            var name = x.Name.ToLower().Contains(_search.ToLower());
            var leaderFirstName = x.Leader?.FirstName != null && x.Leader.FirstName.ToLower().Contains(_search.ToLower());
            var leaderLastName  = x.Leader?.LastName != null && x.Leader.LastName.ToLower().Contains(_search.ToLower());
            return name || leaderFirstName || leaderLastName;
        }).ToList()
        ?? new(); // Filtration based on _search

    private List<List<TeamModel>> TeamsFilteredPages => TeamsFiltered.Select((x, i) => new  // Splits the one big list into smaller lists of size _showCount
    {
        Index = i,
        Value = x
    }).GroupBy(x => x.Index / _showCount)
        .Select(x => x.Select(v => v.Value).ToList())
        .ToList();
    
    protected override async Task OnInitializedAsync()
    {
        _teams = await PublicHttp.Client.GetFromJsonAsync<List<TeamModel>>("api/Team") ?? new List<TeamModel>();
        foreach (var team in _teams)
            team.Leader = await PublicHttp.Client.GetFromJsonAsync<UserModel>($"api/User/{team.LeaderId}"); // Only users loaded directly from UserController have First and Last name (API limitation)
    }

    private void OnSearchQueryChanged(ChangeEventArgs e)
    {
        _search = e.Value?.ToString() ?? "";
        _selectedPageIndex = 0;
    }
    
    private void OnItemsOnPageChanged(ChangeEventArgs e)
    {
        _selectedPageIndex = 0;
        _showCount = int.Parse(e.Value?.ToString() ?? "10");
    }
}
