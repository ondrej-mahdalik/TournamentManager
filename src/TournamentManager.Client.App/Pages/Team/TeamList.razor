@page "/Team/List"
@using TournamentManager.Common.Models
@using System.Net
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Teams List</PageTitle>

<div id="content">
    <div class="container-fluid">
        <div class="row mb-3">
            <div class="col d-xl-flex d-flex align-items-center">
                <h3 class="text-dark d-xl-flex">Teams</h3>
            </div>
            <div class="col col-auto d-flex align-items-center"><a href="create.html"><button class="btn btn-primary" type="button">Create New Team</button></a></div>
        </div>
        <div class="card shadow">
            <div class="card-body shadow">
                @if(_teams is null)
                {
                    <p class="text-center fw-bold">Loading...</p>
                }
                else
                {
                    <div class="row">
                    
                        <div class="col-md-6 text-nowrap">
                            <div id="dataTable_length" class="dataTables_length" aria-controls="dataTable">
                                <label class="form-label">
                                    Show 
                                    <select @bind="@_showCount" class="d-inline-block form-select form-select-sm">
                                        <option value="1">1</option> <!-- TODO : Delete this debug value -->
                                        <option value="10" selected>10</option>
                                        <option value="25">25</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                    </select>
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div id="dataTable_filter" class="text-md-end dataTables_filter"><label class="form-label"><input class="form-control form-control-sm" @onchange="onChangeSearchQuery" type="search" aria-controls="dataTable" placeholder="Search" /></label></div>
                        </div>
                    </div>
                    <div id="dataTable" class="table-responsive table mt-2" role="grid" aria-describedby="dataTable_info">
                        <table id="dataTable" class="table my-0">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th class="text-start"></th>
                                </tr>
                            </thead>
                            <tbody> 
                                @foreach(TeamModel team in TeamsFilteredPages[_selectedPageIndex]){
                                    <tr>
                                        <td><img class="rounded-circle me-2" width="30" height="30" src="@team.LogoUrl" />@team.Name</td>
                                        <td class="text-end"><a data-bs-target="/Team/@team.Id" href="/Team/Detail/@team.Id"><button class="btn btn-primary" type="button">Detail</button></a></td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td><strong>Name</strong></td>
                                    <td></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                }
                <div class="row">
                    <div class="col-md-6 align-self-center">
                        <p id="dataTable_info" class="dataTables_info" role="status" aria-live="polite">
                            Showing @(1 + _selectedPageIndex * _showCount) to @((_showCount + _selectedPageIndex * _showCount) < TeamsFiltered.Count ? (_showCount + _selectedPageIndex * _showCount) : TeamsFiltered.Count)  of @(TeamsFiltered.Count)
                        </p>
                    </div>
                    <div class="col-md-6">
                        <nav class="d-lg-flex justify-content-lg-end dataTables_paginate paging_simple_numbers">
                            <ul class="pagination">
                                <li class="@(_selectedPageIndex <= 0 ? "page-item disabled" : "page-item")"><a class="page-link" aria-label="Previous" @onclick="(() => _selectedPageIndex--)"><span aria-hidden="true">«</span></a></li>
                                @for(int i = _selectedPageIndex - 1; i <= _selectedPageIndex + 1; i++)
                                {
                                    int num = i;
                                    if(_selectedPageIndex == 0)
                                    {
                                        num = i + 1; // So user cant go to page -1
                                    }
                                    else if(_selectedPageIndex >= TeamsFilteredPages.Count - 1)
                                    {
                                        num = i - 1; // So user cant go to a page that is too high
                                    }
                                    if (num > TeamsFilteredPages.Count - 1) break; // If there are fewer than 3 pages total

                                    <li class="@(_selectedPageIndex == num  ? "page-item active":"page-item")">
                                        <a class="page-link" @onclick="(() => _selectedPageIndex = num)">@(num+1)</a>
                                    </li>
                                }
                                <li class="@(_selectedPageIndex >= @TeamsFilteredPages.Count - 1 ? "page-item disabled" : "page-item")"><a class="page-link" aria-label="Next" @onclick="(() => _selectedPageIndex++)"><span aria-hidden="true">»</span></a></li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<TeamModel>? _teams;
    private string _search = "";
    private int _showCount = 10;
    private int _selectedPageIndex = 0;

    private List<TeamModel> TeamsFiltered => _teams?
        .Where(x =>
        {
            var name = x.Name.ToLower().Contains(_search.ToLower());
            var leaderFirstName = x.Leader is not null && x.Leader.FirstName is not null ? x.Leader.FirstName.ToLower().Contains(_search.ToLower()) : false;
            var leaderLastName  = x.Leader is not null && x.Leader.LastName is not null ? x.Leader.LastName.ToLower().Contains(_search.ToLower()) : false;
            return name || leaderFirstName || leaderLastName;
        }).ToList()
        ?? new(); // Filtration based on _search

    private List<List<TeamModel>> TeamsFilteredPages => TeamsFiltered.Select((x, i) => new  // Splits the one big list into smaller lists of size _showCount
    {
        Index = i,
        Value = x
    }).GroupBy(x => x.Index / _showCount)
        .Select(x => x.Select(v => v.Value).ToList())
        .ToList();

    private void onChangeSearchQuery(ChangeEventArgs e)
    {
        if(e is not null && e.Value is not null)
            _search = (string)e.Value;
        _selectedPageIndex = 0;
    }

    protected override async Task OnInitializedAsync()
    {
        _teams = await Http.GetFromJsonAsync<List<TeamModel>>("api/Team") ?? new List<TeamModel>();    
    }
}
