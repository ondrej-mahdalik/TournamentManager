@page "/Team/Manage/{Id}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using TournamentManager.Client.App.Shared.ModalComponents

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager;



@if(_team is null || _currentUser is null)
{
    <p class="text-center fw-bold">Loading...</p>
}
else
{
    @if (_showError)
    {
        <MessageBox MessageType="Common.Enums.MessageType.Error" Title="Error" Message="_errorMessage" ShowCloseButton="true"/>
    }

    <div class="container-fluid">
        <div class="row mb-3">
            <div class="col d-flex align-items-center">
                @if (_team.LogoUrl is not null)
                {
                    <img class="rounded-circle me-2" src="@_team.LogoUrl" height="60" width="60" alt="Team logo"/>
                }
                <h3 class="text-dark mb-0">@_team.Name</h3>
            </div>
            <div class="col d-xxl-flex align-items-xxl-center col-auto"><a href="/Team/Detail/@_team.Id" class="btn btn-light">Back to team detail</a></div>
            <div class="col d-xxl-flex align-items-xxl-center col-auto"><a @onclick="DeleteTeam" class="btn btn-danger">Delete Team</a></div>
        </div>
        <div class="row mb-4">
            <div class="col">
                <div class="card shadow">
                    <div class="card-header">
                        <h6 class="text-primary mb-0">Edit Team</h6>
                    </div>
                    <div class="card-body">
                        <form>
                            <div class="row">
                                <div class="col">
                                    <EditForm Model="@_team" OnValidSubmit="@HandleValidSubmit">
                                        <DataAnnotationsValidator/>
                                        <ValidationSummary/>
                                        <div class="mb-2">
                                            <label class="form-label w-100">Team Name</label>
                                            <InputText class="form-control" type="text" @bind-Value="_team.Name" id="name" name="name"/>
                                        </div>
                                        <div class="mb-2">
                                            <label class="form-label w-100">Team Logo (optional)</label>
                                            <InputText class="form-control" type="url" @bind-Value="_team.LogoUrl" id="logoUrl"/>
                                        </div>
                                        <div class="text-end">
                                            <button class="btn btn-primary" type="submit">Save Changes</button>
                                        </div>
                                    </EditForm>
                                 </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mb-4">
            <div class="col">
                <div class="card shadow">
                    <div class="card-header">
                        <h6 class="text-primary mb-0">Members</h6>
                    </div>
                    <div class="card-body" id="membersList">
                        @if(_members is null)
                        {
                            <p class="text-center fw-bold">Loading ...</p>
                        } 
                        else if (_members.Count == 0)
                        {
                            <p class="text-center fw-bold">No members.</p>
                        }
                        else
                        {
                            <div class="row">

                                <div class="col-md-6 text-nowrap">
                                    <div id="dataTable_length" class="dataTables_length" aria-controls="dataTable">
                                        <label class="form-label">
                                            Show
                                            <select @onchange="OnItemsOnMembersPageChanged" class="d-inline-block form-select form-select-sm">
                                                <option value="10" selected>10</option>
                                                <option value="25">25</option>
                                                <option value="50">50</option>
                                                <option value="100">100</option>
                                            </select>
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div id="dataTable_filter" class="text-md-end dataTables_filter">
                                        <label class="form-label">
                                            <input class="form-control form-control-sm" @oninput="OnMembersSearchQueryChanged" type="search" aria-controls="dataTable" placeholder="Search" />
                                        </label>
                                    </div>
                                </div>
                            </div>
                            @if (MembersFiltered.Count == 0)
                            {
                                <p class="text-center fw-bold">No members found.</p>
                            }
                            else
                            {
                                <div id="dataTable" class="table-responsive table mt-2" role="grid" aria-describedby="dataTable_info">
                                    <table id="dataTable" class="table my-0">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Email</th>
                                                <th></th>
                                                <th></th>
                                                <th class="text-start"></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var member in MembersFilteredPages[_membersSelectedPageIndex])
                                            {
                                                <tr>
                                                    <td class="mb-0">
                                                        @if (member.ProfilePictureUrl is not null)
                                                        {
                                                            <img alt="Profile picture" class="rounded-circle me-2" width="30" height="30" src="@member.ProfilePictureUrl" />
                                                        }
                                                        @member.FirstName @member.LastName
                                                    </td>
                                                    <td class="mb-0">@member.Email</td>
                                                    <td class="text-end"><a href="/Profile/Detail/@member.Id" class="btn btn-primary">Detail</a></td>
                                                    <td class="text-end"><a class="btn btn-danger" @onclick="() => RemoveMember(member.Id)">Remove</a></td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>

                                </div>
                                <div class="row">
                                    <div class="col-md-6 align-self-center">
                                        <p id="dataTable_info" class="dataTables_info" role="status" aria-live="polite">
                                            Showing @(
                                1 + _membersSelectedPageIndex * _membersShowCount
                                ) to @(
                                           (_membersShowCount + _membersSelectedPageIndex * _membersShowCount) < MembersFiltered.Count ?
                                           (_membersShowCount + _membersSelectedPageIndex * _membersShowCount) : MembersFiltered.Count
                                           ) of @(
                                           MembersFiltered.Count
                                           )
                                        </p>
                                    </div>
                                    <div class="col-md-6">
                                        <nav class="d-lg-flex justify-content-lg-end dataTables_paginate paging_simple_numbers">
                                            <ul class="pagination">
                                                <li class="page-item @(_membersSelectedPageIndex <= 0 ? "disabled" : "")">
                                                    <a role="button" class="page-link" aria-label="Previous" @onclick="() => _membersSelectedPageIndex--"><span class="user-select-none" aria-hidden="true">«</span></a>
                                                </li>
                                                @for (var i = _membersSelectedPageIndex - 1; i <= _membersSelectedPageIndex + 1; i++)
                                                {
                                                    var num = i;
                                                    if (_membersSelectedPageIndex == 0)
                                                        num = i + 1; // So user cant go to page -1
                                                    else if (_membersSelectedPageIndex >= MembersFilteredPages.Count - 1)
                                                        num = i - 1; // So user cant go to a page that is too high

                                                    if (num > MembersFilteredPages.Count - 1)
                                                    {
                                                        break; // If there are fewer than 3 pages total
                                                    }
                                                    else if (_membersSelectedPageIndex == 1 && MembersFilteredPages.Count == 2 && i == 0)
                                                    {
                                                        // If only 2 pages are available, clicking the second one would make page 0 appear
                                                        // which is obviously not possible
                                                        continue;
                                                    }

                                                    <li class="page-item @(_membersSelectedPageIndex == num ? "active" : "")">
                                                        <a class="page-link" @onclick="() => _membersSelectedPageIndex = num" role="button">@(
                                            num + 1
                                            )</a>
                                                    </li>
                                                }
                                                <li class="page-item @(_membersSelectedPageIndex >= @MembersFilteredPages.Count - 1 ? "disabled" : "")">
                                                    <a class="page-link" aria-label="Next" @onclick="() => _membersSelectedPageIndex++" role="button"><span class="user-select-none" aria-hidden="true">»</span></a>
                                                </li>
                                            </ul>
                                        </nav>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card shadow">
                    <div class="card-header">
                        <h6 class="text-primary mb-0">Join requests</h6>
                    </div>
                    <div class="card-body" id="requestsList">
                        @if (_requestedMembers is null)
                        {
                            <p class="text-center fw-bold">Loading ...</p>
                        }
                        else if (_requestedMembers.Count == 0)
                        {
                            <p class="text-center fw-bold">No join requests.</p>
                        }
                        else
                        {
                            <div class="row">

                                <div class="col-md-6 text-nowrap">
                                    <div id="dataTable_length" class="dataTables_length" aria-controls="dataTable">
                                        <label class="form-label">
                                            Show
                                            <select @onchange="OnItemsOnRequestsPageChanged" class="d-inline-block form-select form-select-sm">
                                                <option value="10" selected>10</option>
                                                <option value="25">25</option>
                                                <option value="50">50</option>
                                                <option value="100">100</option>
                                            </select>
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div id="dataTable_filter" class="text-md-end dataTables_filter">
                                        <label class="form-label">
                                            <input class="form-control form-control-sm" @oninput="OnRequestsSearchQueryChanged" type="search" aria-controls="dataTable" placeholder="Search" />
                                        </label>
                                    </div>
                                </div>
                            </div>
                            @if (RequestsFiltered.Count == 0)
                            {
                                <p class="text-center fw-bold">No join requests found.</p>
                            }
                            else
                            {
                                <div id="dataTable" class="table-responsive table mt-2" role="grid" aria-describedby="dataTable_info">
                                    <table id="dataTable" class="table my-0">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Email</th>
                                                <th></th>
                                                <th></th>
                                                <th></th>
                                                <th class="text-start"></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var requestMember in RequestsFilteredPages[_requestsSelectedPageIndex])
                                            {
                                                <tr>
                                                    <td class="mb-0">
                                                        @if (requestMember.ProfilePictureUrl is not null)
                                                        {
                                                            <img alt="Profile picture" class="rounded-circle me-2" width="30" height="30" src="@requestMember.ProfilePictureUrl" />
                                                        }
                                                        @requestMember.FirstName @requestMember.LastName
                                                    </td>
                                                    <td class="mb-0">@requestMember.Email</td>
                                                    <td class="text-end"><a href="/Profile/Detail/@requestMember.Id" class="btn btn-primary">Detail</a></td>
                                                    <td class="text-end"><a class="btn btn-success" @onclick="() => AcceptRequest(requestMember)">Accept</a></td>
                                                    <td class="text-end"><a class="btn btn-danger" @onclick="() => RemoveRequest(requestMember)">Remove</a></td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>

                                </div>
                                <div class="row">
                                    <div class="col-md-6 align-self-center">
                                        <p id="dataTable_info" class="dataTables_info" role="status" aria-live="polite">
                                            Showing @(
                                        1 + _requestsSelectedPageIndex * _requestsShowCount
                                        ) to @(
                                           (_requestsShowCount + _requestsSelectedPageIndex * _requestsShowCount) < RequestsFiltered.Count ?
                                           (_requestsShowCount + _requestsSelectedPageIndex * _requestsShowCount) : RequestsFiltered.Count
                                           ) of @(
                                           RequestsFiltered.Count
                                           )
                                        </p>
                                    </div>
                                    <div class="col-md-6">
                                        <nav class="d-lg-flex justify-content-lg-end dataTables_paginate paging_simple_numbers">
                                            <ul class="pagination">
                                                <li class="page-item @(_requestsSelectedPageIndex <= 0 ? "disabled" : "")">
                                                    <a role="button" class="page-link" aria-label="Previous" @onclick="() => _requestsSelectedPageIndex--"><span class="user-select-none" aria-hidden="true">«</span></a>
                                                </li>
                                                @for (var i = _requestsSelectedPageIndex - 1; i <= _requestsSelectedPageIndex + 1; i++)
                                                {
                                                    var num = i;
                                                    if (_requestsSelectedPageIndex == 0)
                                                        num = i + 1; // So user cant go to page -1
                                                    else if (_requestsSelectedPageIndex >= RequestsFilteredPages.Count - 1)
                                                        num = i - 1; // So user cant go to a page that is too high

                                                    if (num > RequestsFilteredPages.Count - 1)
                                                    {
                                                        break; // If there are fewer than 3 pages total
                                                    }
                                                    else if (_requestsSelectedPageIndex == 1 && RequestsFilteredPages.Count == 2 && i == 0)
                                                    {
                                                        // If only 2 pages are available, clicking the second one would make page 0 appear
                                                        // which is obviously not possible
                                                        continue;
                                                    }

                                                    <li class="page-item @(_requestsSelectedPageIndex == num ? "active" : "")">
                                                        <a class="page-link" @onclick="() => _requestsSelectedPageIndex = num" role="button">
                                                            @(
                                                                num + 1
                                                                )
                                                        </a>
                                                    </li>
                                                }
                                                <li class="page-item @(_requestsSelectedPageIndex >= RequestsFilteredPages.Count - 1 ? "disabled" : "")">
                                                    <a class="page-link" aria-label="Next" @onclick="() => _requestsSelectedPageIndex++" role="button"><span class="user-select-none" aria-hidden="true">»</span></a>
                                                </li>
                                            </ul>
                                        </nav>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? Id { get; set; }
    [CascadingParameter]
    IModalService Modal { get; set; } = default!;
    TeamModel? _team;
    private List<UserModel>? _members;
    private List<UserModel>? _requestedMembers;
    private UserModel? _currentUser;
    private string? _newName;
    private string? _newLogoUrl;

    private bool _showError = false;
    private string _errorMessage = "";


    protected override async Task OnInitializedAsync()
    {
        _members = new List<UserModel>();
        _requestedMembers = new List<UserModel>();
        try
        {
            _currentUser = await Http.GetFromJsonAsync<UserModel>($"api/User/current");
            _team = await Http.GetFromJsonAsync<TeamModel>($"/api/Team/{Id}");
            if (_team is not null)
            {
                foreach (var userIsInTeam in _team.Members)
                {
                    var member = await Http.GetFromJsonAsync<UserModel>($"/api/User/{userIsInTeam.UserId}");
                    if (member is null)
                        continue;
                    if (userIsInTeam.IsApproved)
                    {
                        _members.Add(member);
                    }
                    else
                    {
                        _requestedMembers.Add(member);
                    }
                }

                _members = _members.OrderBy(x => x.FirstName).ToList();
                _requestedMembers = _requestedMembers.OrderBy(x => x.FirstName).ToList();

                _newName = _team.Name;
                _newLogoUrl = _team.LogoUrl;

            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        if(_currentUser?.IsAdministrator != true && _currentUser?.Id != _team?.LeaderId)
        {
            NavigationManager.NavigateTo($"/Team/Detail/{_team?.Id}");
        }
    }

    private async void HandleValidSubmit()
    {
        if (_team is null) return;
        var response = await Http.PutAsJsonAsync<TeamModel>("/api/Team", _team);
        if (!response.IsSuccessStatusCode)
        {
            _showError = true;
            _errorMessage = "Could not save changes";
        }
        NavigationManager.NavigateTo($"/Team/Detail/{_team?.Id}");
    }

    private int _membersShowCount = 10;
    private int _membersSelectedPageIndex;
    private string _membersSearch = "";

    private void OnMembersSearchQueryChanged(ChangeEventArgs e)
    {
        _membersSearch = e.Value?.ToString() ?? "";
        _membersSelectedPageIndex = 0;
    }

    private void OnItemsOnMembersPageChanged(ChangeEventArgs e)
    {
        _membersSelectedPageIndex = 0;
        _membersShowCount = int.Parse(e.Value?.ToString() ?? "10");
    }

    private List<UserModel> MembersFiltered => _members?
        .Where(x =>
        {
            var firstName = x.FirstName is not null && x.FirstName.ToLower().Contains(_membersSearch.ToLower());
            var lastName = x.LastName is not null && x.LastName.ToLower().Contains(_membersSearch.ToLower());
            var email = x.Email is not null && x.Email.ToLower().Contains(_membersSearch.ToLower());
            return firstName || lastName || email;
        }).ToList()
        ?? new(); // Filtration based on _search

    private List<List<UserModel>> MembersFilteredPages => MembersFiltered.Select((x, i) => new  // Splits the one big list into smaller lists of size _membersShowCount
    {
        Index = i,
        Value = x
    }).GroupBy(x => x.Index / _membersShowCount)
        .Select(x => x.Select(v => v.Value).ToList())
        .ToList();


    private async void RemoveMember(Guid id)
    {
        var member = await Http.GetFromJsonAsync<UserModel>($"api/User/current");
        if(member is null)
        {
            _showError = true;
            _errorMessage = "Internal database error. User does not exist.";
            return; 
        }


        var result = await Modal.Show<Confirmation>($"Do you really want to remove {member.FirstName} {member.LastName} from {_team?.Name}? This operation is permanent !").Result;
        if (result.Cancelled)
            return;

        if (_team?.Members is null)
            return;
        
        var membership = _team.Members.FirstOrDefault(m => m.UserId == member.Id);
        if(membership is null)
        {
            _showError = true;
            _errorMessage = "Internal database error. User is not member of this team.";
            return;
        }
        if (!result.Confirmed)
            return;
        
        await Http.DeleteAsync($"api/UserIsInTeam/{membership.Id}");
        if (_members is null)
            return;
        
        _members.RemoveAll(x => x.Id == member.Id);
        StateHasChanged();
    }

    // Join requests pagination 

    private int _requestsShowCount = 10;
    private int _requestsSelectedPageIndex;
    private string _requestsSearch = "";

    private void OnRequestsSearchQueryChanged(ChangeEventArgs e)
    {
        _requestsSearch = e.Value?.ToString() ?? "";
        _requestsSelectedPageIndex = 0;
    }

    private void OnItemsOnRequestsPageChanged(ChangeEventArgs e)
    {
        _requestsSelectedPageIndex = 0;
        _requestsShowCount = int.Parse(e.Value?.ToString() ?? "10");
    }

    private List<UserModel> RequestsFiltered => _requestedMembers?
        .Where(x =>
        {
            var firstName = x.FirstName is not null && x.FirstName.ToLower().Contains(_membersSearch.ToLower());
            var lastName = x.LastName is not null && x.LastName.ToLower().Contains(_membersSearch.ToLower());
            var email = x.Email is not null && x.Email.ToLower().Contains(_membersSearch.ToLower());
            return firstName || lastName || email;
        }).ToList()
        ?? new(); // Filtration

    private List<List<UserModel>> RequestsFilteredPages => RequestsFiltered.Select((x, i) => new  // Splits the one big list into smaller lists
    {
        Index = i,
        Value = x
    }).GroupBy(x => x.Index / _requestsShowCount)
        .Select(x => x.Select(v => v.Value).ToList())
        .ToList();

    private async void AcceptRequest(UserModel requestedMember)
    {
        if (_team != null)
        {
            var membership = (_team.Members).FirstOrDefault(m => m.UserId == requestedMember.Id);
            if (membership is null)
            {
                _showError = true;
                _errorMessage = "Membership is null";
                return;
            }
            membership.IsApproved = true;
            await Http.PutAsJsonAsync($"/api/UserIsInTeam", membership);
        }
        _requestedMembers?.Remove(requestedMember);
        _members?.Add(requestedMember);
        StateHasChanged();
    }

    private async void RemoveRequest(UserModel requestedMember)
    {
        if (_team?.Members != null)
        {
            var membership = (_team.Members).FirstOrDefault(m => m.UserId == requestedMember.Id);
            if (membership is null) return;
            await Http.DeleteAsync($"/api/UserIsInTeam/{membership.Id}");
        }
        _requestedMembers?.Remove(requestedMember);
        StateHasChanged();
    }

    private async void DeleteTeam()
    {
        var result = await Modal.Show<Confirmation>($"Do you want to delete {_team?.Name}? This operation is permanent!").Result;

        if (!result.Confirmed)
            return;
        
        var response = await Http.DeleteAsync($"/api/Team/{_team?.Id}");
        // TODO : handle response
        
        NavigationManager.NavigateTo("/Team/List");
    }
}
