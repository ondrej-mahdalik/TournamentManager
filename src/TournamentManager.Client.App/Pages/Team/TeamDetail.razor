@page "/Team/Detail/{Id}"
@using TournamentManager.Common.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http
@inject NavigationManager NavigationManager;

<PageTitle>Team Detail</PageTitle>

<div class="container-fluid">
    @if(_team is null)
    {
        <p class="text-center fw-bold">Loading ...</p>
    }
    else
    {
        <div class="row mb-3">
            <div class="col d-xl-flex d-flex align-items-center">
                @if (_team.LogoUrl is not null)
                {
                    <img class="me-2" height="100" src="@_team.LogoUrl" alt="Team logo"/>
                }
                <h3 class="text-dark mb-0">@_team?.Name</h3>
            </div>
            <div class="col d-xxl-flex align-items-xxl-center col-auto"><a class="btn btn-light" href="/Team/List">Back to All Teams</a></div>
            @if (_currentUser?.Id != _team!.LeaderId || _team.Members.Any(x => x.UserId == _currentUser?.Id))
            {
                @if (HasPendingJoinRequest())
                {
                    <div class="col d-xxl-flex align-items-xxl-center col-auto"><a class="btn btn-danger" role="button" @onclick="CancelJoinRequestAsync">Cancel Join Request</a></div>
                }
                else
                {
                    <div class="col d-xxl-flex align-items-xxl-center col-auto"><a class="btn btn-primary" role="button" @onclick="JoinTeamAsync">Join Team</a></div>
                }
            }
            @if (_currentUser is not null && _leader is not null && (_currentUser.Id == _leader.Id || _currentUser.IsAdministrator))
                {
                    <div class="col d-xxl-flex align-items-xxl-center col-auto"><a class="btn btn-primary" role="button" @onclick="EditTeam">Edit Team</a></div>
                }
        </div>  
        
        <div class="row mb-4">
            <div class="col">
                <div class="card shadow">
                    <div class="card-header">
                        <h6 class="mb-0 text-primary">Leader</h6>
                    </div>
                    <div class="card-body">
                        <div id="dataTable-1" class="table-responsive table mt-2" role="grid" aria-describedby="dataTable_info">
                            <table id="dataTable" class="table my-0">
                                <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th></th>
                                </tr>
                                </thead>
                                <tbody>
                                @if (_leader is null)
                                {
                                    <tr>
                                        <td><em>Deleted user</em></td>
                                    </tr>
                                }
                                else
                                {
                                    <tr>
                                        <td>
                                            @if (_leader.ProfilePictureUrl is not null)
                                            {
                                                <img class="rounded-circle me-2" width="30" height="30" src="@_leader.ProfilePictureUrl" alt="Profile picture"/>
                                            }
                                            @_leader.FirstName @_leader.LastName
                                        </td>
                                        <td>@_leader.Email</td>
                                        <td class="text-end"><a href="/Profile/Detail/@_leader.Id" class="btn btn-primary">Detail</a></td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mb-4">
            <div class="col">
                <div class="card shadow">
                    <div class="card-header">
                        <h6 class="mb-0 text-primary">Members</h6>
                    </div>
                    <div class="card-body" id="membersList">
                        @if (_members is null)
                        {
                            <p class="text-center fw-bold">Loading ...</p>
                        }
                        else if (_members.Count == 0)
                        {
                            <p class="text-center fw-bold">No members.</p>
                        }
                        else
                        {
                            <div class="row mb-4">
                                <div class="col-md-6 text-nowrap">
                                    <div id="dataTable_length" class="dataTables_length" aria-controls="dataTable">
                                        <label class="form-label">
                                            Show
                                            <select @onchange="OnItemsOnMembersPageChanged" class="d-inline-block form-select form-select-sm">
                                                <option value="10" selected>10</option>
                                                <option value="25">25</option>
                                                <option value="50">50</option>
                                                <option value="100">100</option>
                                            </select>
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div id="dataTable_filter" class="text-md-end dataTables_filter">
                                        <label class="form-label">
                                            <input class="form-control form-control-sm" @oninput="OnMembersSearchQueryChanged" type="search" aria-controls="dataTable" placeholder="Search"/>
                                        </label>
                                    </div>
                                </div>
                            </div>
                            @if (MembersFiltered.Count == 0)
                            {
                                <p class="text-center fw-bold">No members found.</p>
                            }
                            else
                            {
                                <div id="dataTable" class="table-responsive table mt-2" role="grid" aria-describedby="dataTable_info">
                                    <table id="dataTable" class="table my-0">
                                        <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>Email</th>
                                            <th></th>
                                            <th class="text-start"></th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        @foreach (var member in MembersFilteredPages[_membersSelectedPageIndex])
                                        {
                                            <tr>
                                                <td class="mb-0">
                                                    @if (member.ProfilePictureUrl is not null)
                                                    {
                                                        <img alt="Profile picture" class="rounded-circle me-2" width="30" height="30" src="@member.ProfilePictureUrl"/>
                                                    }
                                                    @member.FirstName @member.LastName
                                                </td>
                                                <td class="mb-0">@member.Email</td>
                                                <td class="text-end"><a href="/Profile/Detail/@member.Id" class="btn btn-primary">Detail</a></td>
                                            </tr>
                                        }
                                        </tbody>
                                    </table>

                                </div>
                                <div class="row mb-4">
                                    <div class="col-md-6 align-self-center">
                                        <p id="dataTable_info" class="dataTables_info" role="status" aria-live="polite">
                                            Showing @(
    1 + _membersSelectedPageIndex * _membersShowCount
                                                        ) to @(
    (_membersShowCount + _membersSelectedPageIndex * _membersShowCount) < MembersFiltered.Count ?
        (_membersShowCount + _membersSelectedPageIndex * _membersShowCount) : MembersFiltered.Count
                                                                 ) of @(
    MembersFiltered.Count
                                                                          )
                                        </p>
                                    </div>
                                    <div class="col-md-6">
                                        <nav class="d-lg-flex justify-content-lg-end dataTables_paginate paging_simple_numbers">
                                            <ul class="pagination">
                                                <li class="page-item @(_membersSelectedPageIndex <= 0 ? "disabled" : "")">
                                                    <a role="button" class="page-link" aria-label="Previous" @onclick="() => _membersSelectedPageIndex--"><span class="user-select-none" aria-hidden="true">«</span></a>
                                                </li>
                                                @for (var i = _membersSelectedPageIndex - 1; i <= _membersSelectedPageIndex + 1; i++)
                                                {
                                                    var num = i;
                                                    if (_membersSelectedPageIndex == 0)
                                                        num = i + 1;// So user cant go to page -1
                                                    else if (_membersSelectedPageIndex >= MembersFilteredPages.Count - 1)
                                                        num = i - 1;// So user cant go to a page that is too high

                                                    if (num > MembersFilteredPages.Count - 1)
                                                    {
                                                        break;// If there are fewer than 3 pages total
                                                    }
                                                    else if (_membersSelectedPageIndex == 1 && MembersFilteredPages.Count == 2 && i == 0)
                                                    {
                                                        // If only 2 pages are available, clicking the second one would make page 0 appear
                                                        // which is obviously not possible
                                                        continue;
                                                    }

                                                    <li class="page-item @(_membersSelectedPageIndex == num ? "active" : "")">
                                                        <a class="page-link" @onclick="() => _membersSelectedPageIndex = num" role="button">
                                                            @(
    num + 1
                                                                )
                                                        </a>
                                                    </li>
                                                }
                                                <li class="page-item @(_membersSelectedPageIndex >= @MembersFilteredPages.Count - 1 ? "disabled" : "")">
                                                    <a class="page-link" aria-label="Next" @onclick="() => _membersSelectedPageIndex++" role="button"><span class="user-select-none" aria-hidden="true">»</span></a>
                                                </li>
                                            </ul>
                                        </nav>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="row mb-4">
            <div class="col">
                <!-- Tournament list -->
                <div class="card shadow">
                    <div class="card-header">
                        <h6 class="mb-0 text-primary">Tournaments</h6>
                    </div>
                    <div class="card-body">
                        @if (_tournaments is null)
                        {
                            <p class="text-center fw-bold">Loading...</p>
                        }
                        else if (_tournaments.Count == 0)
                        {
                            <p class="text-center fw-bold">Team did not yet participate in any tournaments.</p>
                        }
                        else
                        {
                            <div class="row">
                                <div class="col-md-6 text-nowrap">
                                    <div id="dataTable_length" class="dataTables_length" aria-controls="dataTable">
                                        <label class="form-label">
                                            Show
                                            <select @onchange="OnTournamentsOnPageChanged" class="d-inline-block form-select form-select-sm">
                                                <option value="10" selected="selected">10</option>
                                                <option value="25">25</option>
                                                <option value="50">50</option>
                                                <option value="100">100</option>
                                            </select>
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="text-md-end dataTables_filter" id="dataTable_filter">
                                        <label class="form-label">
                                            <input type="text" @bind="@_tournamentsSearch" @bind:event="oninput" class="form-control form-control-sm" placeholder="Search"/>
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="table-responsive table mt-2" role="grid">
                                @if (TournamentsFiltered.Count == 0)
                                {
                                    <p class="text-center fw-bold">No tournaments found.</p>
                                }
                                else
                                {
                                    <table class="table my-0" id="dataTable">
                                        <thead>
                                        <tr>
                                            <th>Sport<i class="fas fa-baseball-ball pe-0 ms-2"></i></th>
                                            <th>Name</th>
                                            <th>Date</th>
                                            <th>Visibility</th>
                                            <th>Occupation</th>
                                            <th>Winner</th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        @foreach (var tournament in TournamentsFilteredPages[_tournamentsSelectedPageIndex])
                                        {

                                            <tr>
                                                <td>@tournament.Sport?.Name</td>
                                                <td>@tournament.Name</td>
                                                <td>@tournament.Date.ToString("dd. MM. yyyy")</td>
                                                <td>@(tournament.IsPublic ? "Public" : "Private")</td>
                                                <td>@_numberOfParticipants[@tournament.Id] / @tournament.MaxAttendees</td>
                                                <td class="text-end"><a data-bs-target="/Tournament/@tournament.Id" href="/Tournament/Detail/@tournament.Id" class="btn btn-primary">Detail</a></td>
                                            </tr>
                                        }
                                        </tbody>
                                    </table>
                                }
                            </div>
                            <div class="row">
                                @if (TournamentsFiltered.Count > 0)
                                {
                                    <div class="col-md-6 align-self-center">
                                        <p id="dataTable_info" class="dataTables_info" role="status" aria-live="polite">
                                            Showing @(1 + _tournamentsSelectedPageIndex * _tournamentsShowCount) to @((_tournamentsShowCount + _tournamentsSelectedPageIndex * _tournamentsShowCount) < TournamentsFiltered.Count ?
                                                                                                                        (_tournamentsShowCount + _tournamentsSelectedPageIndex * _tournamentsShowCount) : TournamentsFiltered.Count) of @(TournamentsFiltered.Count)
                                        </p>
                                    </div>

                                    <div class="col-md-6">
                                        <nav class="d-lg-flex justify-content-lg-end dataTables_paginate paging_simple_numbers">
                                            <ul class="pagination">
                                                <li class="page-item @(_tournamentsSelectedPageIndex <= 0 ? "disabled" : "")"><a role="button" class="page-link" aria-label="Previous" @onclick="() => _tournamentsSelectedPageIndex--"><span class="user-select-none" aria-hidden="true">«</span></a></li>
                                                @for (var i = _tournamentsSelectedPageIndex - 1; i <= _tournamentsSelectedPageIndex + 1; i++)
                                                {
                                                    var num = i;
                                                    if (_tournamentsSelectedPageIndex == 0)
                                                        num = i + 1;// So user cant go to page -1

                                                    else if (_tournamentsSelectedPageIndex >= TournamentsFilteredPages.Count - 1)
                                                        num = i - 1;// So user cant go to a page that is too high

                                                    if (num > TournamentsFilteredPages.Count - 1)
                                                    {
                                                        break;// If there are fewer than 3 pages total
                                                    }
                                                    if (_tournamentsSelectedPageIndex == 1 && TournamentsFilteredPages.Count == 2 && i == 0)
                                                    {
                                                        // If only 2 pages are available, clicking the second one would make page 0 appear
                                                        // which is obviously not possible
                                                        continue;
                                                    }

                                                    <li class="page-item @(_tournamentsSelectedPageIndex == num ? "active" : "")">
                                                        <a class="page-link" @onclick="() => _tournamentsSelectedPageIndex = num" role="button">@(num + 1)</a>
                                                    </li>
                                                }
                                                <li class="page-item @(_tournamentsSelectedPageIndex >= @TournamentsFilteredPages.Count - 1 ? "disabled" : "")">
                                                    <a class="page-link" aria-label="Next" @onclick="() => _tournamentsSelectedPageIndex++" role="button"><span class="user-select-none" aria-hidden="true">»</span></a>
                                                </li>
                                            </ul>
                                        </nav>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@code {
    [Parameter]
    public string? Id { get; set; }

    private TeamModel? _team;
    private UserModel? _leader;
    private List<UserModel>? _members; 
    private UserModel? _currentUser;

    protected override async Task OnInitializedAsync()
    {
        _members = new List<UserModel>();
        try
        {
            _team = await Http.GetFromJsonAsync<TeamModel>($"/api/Team/{Id}");
            if (_team is not null)
            {
                _leader = await Http.GetFromJsonAsync<UserModel>($"/api/User/{_team.LeaderId}");

                foreach (UserIsInTeamModel userIsInTeam in _team.Members)
                {
                    UserModel? member = await Http.GetFromJsonAsync<UserModel>($"/api/User/{userIsInTeam.UserId}");
                    if(member is not null)
                    {
                        _members.Add(member);
                    }
                }

            }

            _tournaments = await Http.GetFromJsonAsync<List<TournamentModel>>("api/Tournament") ?? new List<TournamentModel>();
            _tournaments = _tournaments.Where(x => x.Participatings.Any(p => p.TeamId == _team?.Id)).ToList() ;

            _currentUser = await Http.GetFromJsonAsync<UserModel>($"api/User/current");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }


    }

    private bool HasPendingJoinRequest()
    {
        if (_team is null || _currentUser is null)
            return false;

        return _team.Members.Any(x => x.UserId == _currentUser.Id && !x.IsApproved);
    }

    private async Task JoinTeamAsync()
    {
        if (_team is null || HasPendingJoinRequest())
            return;

        if (_currentUser is null)
        {
            NavigationManager.NavigateToLogin("/authentication/login");
            return;
        }

        var response = await Http.PutAsJsonAsync($"/api/UserIsInTeam", new UserIsInTeamModel(_currentUser.Id, _team.Id));
        // TODO handle response

        _team = await Http.GetFromJsonAsync<TeamModel>($"/api/Team/{Id}");
    }

    private async Task CancelJoinRequestAsync()
    {
        if (_team is null || _currentUser is null)
            return;

        var response = await Http.DeleteAsync($"/api/UserIsInTeam/{_team.Members.First(x => x.UserId == _currentUser.Id).Id}");
        // TODO handle response

        _team = await Http.GetFromJsonAsync<TeamModel>($"/api/Team/{Id}");
    }

    private void EditTeam()
    {
        if (_team is null || _currentUser is null)
            return;
        NavigationManager.NavigateTo($"/Team/Manage/{_team.Id}");
    }

    // Memebrs list :

    private int _membersShowCount = 10;
    private int _membersSelectedPageIndex;
    private string _membersSearch = "";

    private void OnMembersSearchQueryChanged(ChangeEventArgs e)
    {
        _membersSearch = e.Value?.ToString() ?? "";
        _membersSelectedPageIndex = 0;
    }

    private void OnItemsOnMembersPageChanged(ChangeEventArgs e)
    {
        _membersSelectedPageIndex = 0;
        _membersShowCount = int.Parse(e.Value?.ToString() ?? "10");
    }

    private List<UserModel> MembersFiltered => _members?
        .Where(x =>
        {
            var firstName = x.FirstName is not null && x.FirstName.ToLower().Contains(_membersSearch.ToLower());
            var lastName = x.LastName is not null && x.LastName.ToLower().Contains(_membersSearch.ToLower());
            var email = x.Email is not null && x.Email.ToLower().Contains(_membersSearch.ToLower());
            return firstName || lastName || email;
        }).ToList()
        ?? new(); // Filtration based on _search

    private List<List<UserModel>> MembersFilteredPages => MembersFiltered.Select((x, i) => new  // Splits the one big list into smaller lists of size _membersShowCount
    {
        Index = i,
        Value = x
    }).GroupBy(x => x.Index / _membersShowCount)
        .Select(x => x.Select(v => v.Value).ToList())
        .ToList();

    // Tournaments 

    private string _tournamentsSearch = "";
    private int _tournamentsShowCount = 10;
    private int _tournamentsSelectedPageIndex;
    private Dictionary<Guid, int> _numberOfParticipants = new();
    private List<TournamentModel>? _tournaments;
    private List<TournamentModel> TournamentsFiltered => _tournaments?
        .Where(x =>
        {
            
            var name = x.Name.ToLower().Contains(_tournamentsSearch.ToLower());
            var sport = x.Sport?.Name.ToLower().Contains(_tournamentsSearch.ToLower()) ?? false;
            var date = x.Date.ToString("dd. MM. yyyy").Contains(_tournamentsSearch);
            var creatorFirstName = x.Creator?.FirstName?.ToLower().Contains(_tournamentsSearch.ToLower()) ?? false;
            var creatorLastName = x.Creator?.LastName?.ToLower().Contains(_tournamentsSearch.ToLower()) ?? false;

            return name || sport || date || creatorFirstName || creatorLastName;
        }).ToList()
        ?? new();

    private List<List<TournamentModel>> TournamentsFilteredPages => TournamentsFiltered.Select((x, i) => new  // Splits the one big list into smaller lists of size _tournamentsShowCount
    {
        Index = i,
        Value = x
    }).GroupBy(x => x.Index / _tournamentsShowCount)
        .Select(x => x.Select(v => v.Value).ToList())
        .ToList();

    private void OnTournamentsOnPageChanged(ChangeEventArgs e)
    {
        _tournamentsSelectedPageIndex = 0;
        _tournamentsShowCount = int.Parse(e.Value?.ToString() ?? "10");
    }
}
