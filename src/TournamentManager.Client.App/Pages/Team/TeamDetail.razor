@page "/Team/Detail/{Id}"
@using TournamentManager.Common.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager;

<PageTitle>Team Detail</PageTitle>

<div class="container-fluid">
    @if(_team is null)
    {
        <p><em>Loading ...</em></p>
    }
    else
    {
        <div class="row mb-3">
            <div class="col d-xl-flex d-flex align-items-center">
                <img class="me-2" height="100" src="@_team.LogoUrl" alt="Team logo"/>
                <h3 class="text-dark mb-0">@_team?.Name</h3>
            </div>
            <div class="col d-xxl-flex align-items-xxl-center col-auto"><a class="btn btn-light" href="/Team/List">Back to All Teams</a></div>
            @if (_currentUser?.Id != _team!.LeaderId || _team.Members.Any(x => x.UserId == _currentUser?.Id))
            {
                @if (HasPendingJoinRequest())
                {
                    <div class="col d-xxl-flex align-items-xxl-center col-auto"><a class="btn btn-danger" role="button" @onclick="CancelJoinRequestAsync">Cancel Join Request</a></div>
                }
                else
                {
                    <div class="col d-xxl-flex align-items-xxl-center col-auto"><a class="btn btn-primary" role="button" @onclick="JoinTeamAsync">Join Team</a></div>
                }
            }
        </div>  
        <div class="row">
            <div class="col">
                <div class="card shadow">
                    <div class="card-header">
                        <h4 class="mb-0">Members</h4>
                    </div>
                    <div class="card-body">
                        <div id="dataTable-1" class="table-responsive table mt-2" role="grid" aria-describedby="dataTable_info">
                            <table id="dataTable" class="table my-0">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if(_team?.Members is null)
                                    {
                                        <tr>
                                            <td><em>Loading ...</em></td>
                                        </tr>
                                    }
                                    else
                                    {
                                        @foreach (var membership in _team.Members)
                                        {
                                            var member = membership.User;
                                            if (member is null)
                                                continue;
                                            
                                            <tr>
                                                <td><img class="rounded-circle me-2" width="30" height="30" src="@member.ProfilePictureUrl" alt="Profile picture"/>@member.FirstName @member.LastName</td>
                                                <td>@member.Email</td>
                                                <td class="text-end"><a href="/Profile/Detail/@member.Id"><button class="btn btn-primary" type="button">Detail</button></a></td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@code {
    [Parameter]
    public string? Id { get; set; }

    private TeamModel? _team;
    private UserModel? _currentUser;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _team = await Http.GetFromJsonAsync<TeamModel>($"/api/Team/{Id}");
            _currentUser = await Http.GetFromJsonAsync<UserModel>($"api/User/current");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private bool HasPendingJoinRequest()
    {
        if (_team is null || _currentUser is null)
            return false;
        
        return _team.Members.Any(x => x.UserId == _currentUser.Id && !x.IsApproved);
    }

    private async Task JoinTeamAsync()
    {
        if (_team is null || HasPendingJoinRequest())
            return;

        if (_currentUser is null)
        {
            NavigationManager.NavigateToLogin("/authentication/login");
            return;
        }

        var response = await Http.PutAsJsonAsync($"/api/UserIsInTeam", new UserIsInTeamModel(_currentUser.Id, _team.Id));
        // TODO handle response
        
        _team = await Http.GetFromJsonAsync<TeamModel>($"/api/Team/{Id}");
    }
    
    private async Task CancelJoinRequestAsync()
    {
        if (_team is null || _currentUser is null)
            return;

        var response = await Http.DeleteAsync($"/api/UserIsInTeam/{_team.Members.First(x => x.UserId == _currentUser.Id).Id}");
        // TODO handle response
        
        _team = await Http.GetFromJsonAsync<TeamModel>($"/api/Team/{Id}");
    }
}
