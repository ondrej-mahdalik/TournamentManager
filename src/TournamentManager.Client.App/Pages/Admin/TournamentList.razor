@page "/Admin/Tournaments"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using TournamentManager.Client.App.Shared.ModalComponents
@using TournamentManager.Common.Enums
@inject HttpClient Http
@inject NavigationManager NavigationManager;
@attribute [Authorize]

<PageTitle>Manage Tournaments</PageTitle>

    <div class="row mb-3">
        <div class="col d-xl-flex d-flex align-items-center">
            <h3 class="text-dark d-xl-flex">Manage tournaments</h3>
        </div>
        <div class="col col-auto d-flex align-items-center">
            <a href="Tournament/Create" class="btn btn-primary">
                Create New
            </a>
        </div>
    </div>
    @if (_displayError)
    {
        <div class="row">
        <div class="col">
            <MessageBox MessageType="MessageType.Error" Title="An error has occured" Message="@_errorMessage"/>
        </div>
        </div>
    }   
    <div class="row mb-3">
        <div class="col">
            <div class="card shadow">
                <div class="card-header">
                    <h6 class="text-primary">Tournaments awaiting approval</h6>
                </div>
                <div class="card-body">
                    @if (PendingTournaments is null)
                    {
                        <p class="text-center fw-bold">Loading...</p>
                    }
                    else
                    {
                        <div class="table-responsive table mt-2" role="grid">
                            <table class="table my-0">
                                <thead>
                                <tr>
                                    <th>Sport<i class="fas fa-baseball-ball pe-0 ms-2"></i></th>
                                    <th>Name</th>
                                    <th>Date</th>
                                    <th>Play Mode</th>
                                    <th>Organizer</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var tournament in PendingTournaments)
                                {
                                    <tr>
                                        <td>@(tournament.Sport?.Name ?? "Other")</td>
                                        <td>@tournament.Name</td>
                                        <td>@tournament.Date.ToString("dd. MM. yyyy")</td>
                                        <td>@(tournament.IsIndividual ? "Individual" : "Teams")</td>
                                        <td>@(tournament.Creator?.FirstName is not null ? $"{tournament.Creator.FirstName} {tournament.Creator.LastName}" : "Deleted user")</td>
                                        <td class="text-end">
                                            <button @onclick="() => ApproveTournamentAsync(tournament)" class="btn btn-primary btn-sm">
                                                Approve
                                            </button>
                                        </td>
                                        <td class="text-end">
                                            <a data-bs-target="/Tournament/@tournament.Id" @onclick="@(() => DeleteTournamentAsync(tournament))" class="btn btn-danger btn-sm">
                                                Delete
                                            </a>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
<div class="row">
    <div class="col">
        <div class="card shadow">
            <div class="card-header">
                <h6 class="text-primary mb-0">All Tournaments</h6>
            </div>
            <div class="card-body">
                @if (_isLoading)
                {
                    <p class="text-center fw-bold">Loading...</p>
                }
                else
                {
                    <div class="row">
                        <div class="col-md-6 text-nowrap">
                            <div class="row d-flex justify-content-start align-items-center">
                                <div class="col-3">
                                    <div id="dataTable_length" class="dataTables_length" aria-controls="dataTable">
                                        <label class="form-label">
                                            Show&nbsp;
                                            <select @onchange="OnItemsOnPageChanged" class="d-inline-block form-select form-select-sm">
                                                <option value="10" selected>10</option>
                                                <option value="25">25</option>
                                                <option value="50">50</option>
                                                <option value="100">100</option>
                                            </select>
                                        </label>
                                    </div>
                                </div>
                                <div class="col-3">
                                    <div class="form-check form-switch">
                                        <input @bind="_showPastTournaments" id="formCheck-1" class="form-check-input" type="checkbox"/><label class="form-check-label" for="formCheck-1">Show past tournaments</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="text-md-end dataTables_filter" id="dataTable_filter">
                                <label class="form-label">
                                    <input type="text" @bind="@_search" @bind:event="oninput" class="form-control form-control-sm" placeholder="Search"/>
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive table mt-2" role="grid">
                        @if (!_isLoading && TournamentsFiltered.Count == 0)
                        {
                            <p class="text-center fw-bold">No tournaments found</p>
                        }
                        else
                        {
                            <table class="table my-0" id="dataTable">
                                <thead>
                                <tr>
                                    <th>Sport<i class="fas fa-baseball-ball pe-0 ms-2"></i></th>
                                    <th>Name</th>
                                    <th>Date</th>
                                    <th>Play Mode</th>
                                    <th>Organizer</th>
                                    <th>Occupation</th>
                                    <th>Winner</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var tournament in TournamentsFilteredPages[_selectedPageIndex])
                                {
                                    <tr>
                                        <td>@(tournament.Sport?.Name ?? "Other")</td>
                                        <td>@tournament.Name</td>
                                        <td>@tournament.Date.ToString("dd. MM. yyyy")</td>
                                        <td>@(tournament.IsIndividual ? "Individual" : "Teams")</td>
                                        <td>@(tournament.Creator?.FirstName is not null ? $"{tournament.Creator.FirstName} {tournament.Creator.LastName}" : "Deleted user")</td>
                                        <td>@_numberOfParticipants[tournament.Id] / @tournament.MaxAttendees</td>
                                        <td>
                                            @if (tournament.WinnerTeamId is not null)
                                            {
                                                @_winners[tournament.Id]
                                            }
                                        </td>
                                        <td class="text-end">
                                            <a href="/Tournament/Manage/@tournament.Id" class="btn btn-primary btn-sm">
                                                Manage
                                            </a>
                                            <a @onclick="@(() => DeleteTournamentAsync(tournament))" class="btn btn-danger btn-sm">
                                                Remove
                                            </a>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        }
                    </div>
                    <div class="row">
                        @if (TournamentsFiltered.Count > 0)
                        {
                            <div class="col-md-6 align-self-center">
                                <p id="dataTable_info" class="dataTables_info" role="status" aria-live="polite">Showing @(1 + _selectedPageIndex * _showCount) to @(_showCount + _selectedPageIndex * _showCount < TournamentsFiltered.Count ? _showCount + _selectedPageIndex * _showCount : TournamentsFiltered.Count) of @(TournamentsFiltered.Count)</p>
                            </div>

                            <div class="col-md-6">
                                <nav class="d-lg-flex justify-content-lg-end dataTables_paginate paging_simple_numbers">
                                    <ul class="pagination">
                                        <li class="page-item @(_selectedPageIndex <= 0 ? "disabled" : "")">
                                            <a role="button" class="page-link" aria-label="Previous" @onclick="() => _selectedPageIndex--">
                                                <span class="user-select-none" aria-hidden="true">«</span>
                                            </a>
                                        </li>
                                        @for (var i = _selectedPageIndex - 1; i <= _selectedPageIndex + 1; i++)
                                        {
                                            var num = i;
                                            if (_selectedPageIndex == 0)
                                                num = i + 1; // So user cant go to page -1

                                            else if (_selectedPageIndex >= TournamentsFilteredPages.Count - 1)
                                                num = i - 1; // So user cant go to a page that is too high

                                            if (num > TournamentsFilteredPages.Count - 1)
                                            {
                                                break; // If there are fewer than 3 pages total
                                            }
                                            if (_selectedPageIndex == 1 && TournamentsFilteredPages.Count == 2 && i == 0)
                                            {
                                                // If only 2 pages are available, clicking the second one would make page 0 appear
                                                // which is obviously not possible
                                                continue;
                                            }

                                            <li class="page-item @(_selectedPageIndex == num ? "active" : "")">
                                                <a class="page-link" @onclick="() => _selectedPageIndex = num" role="button">@(num + 1)</a>
                                            </li>
                                        }
                                        <li class="page-item @(_selectedPageIndex >= TournamentsFilteredPages.Count - 1 ? "disabled" : "")">
                                            <a class="page-link" aria-label="Next" @onclick="() => _selectedPageIndex++" role="button">
                                                <span class="user-select-none" aria-hidden="true">»</span>
                                            </a>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code
{
    [CascadingParameter]
    IModalService Modal { get; set; } = default!;
    
    private string _search = "";
    private int _showCount = 10;
    private int _selectedPageIndex;
    private bool _showPastTournaments;
    private bool _isLoading = true;
    private readonly Dictionary<Guid, int> _numberOfParticipants = new();
    private Dictionary<Guid, string> _winners = new();
    private List<TournamentModel>? _tournaments = new();
    private List<TournamentModel>? PendingTournaments => _tournaments?.Where(x => x.IsPublic && !x.IsApproved).ToList();
    private List<UserModel>? _users = new();

    private bool _displayError;
    private string _errorMessage = string.Empty;

    private List<TournamentModel> TournamentsFiltered => _tournaments?
        .Where(x =>
        {
            var name = x.Name.ToLower().Contains(_search.ToLower());
            var sport = x.Sport?.Name.ToLower().Contains(_search.ToLower()) ?? false;
            var date = x.Date.ToString("dd. MM. yyyy").Contains(_search);
            var creatorFirstName = x.Creator?.FirstName?.ToLower().Contains(_search.ToLower()) ?? false;
            var creatorLastName = x.Creator?.LastName?.ToLower().Contains(_search.ToLower()) ?? false;
            if (_showPastTournaments)
            {
                return name || sport || date || creatorFirstName || creatorLastName;
            }
            return (name || sport || date || creatorFirstName || creatorLastName) && x.Date.Date >= DateTime.Now.Date;
        }).OrderBy(x => x.Date).ToList()
                                                         ?? new();

    private List<List<TournamentModel>> TournamentsFilteredPages => TournamentsFiltered.Select((x, i) => new // Splits the one big list into smaller lists of size _showCount
    {
        Index = i,
        Value = x
    }).GroupBy(x => x.Index / _showCount)
        .Select(x => x.Select(v => v.Value).ToList())
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        List<TeamIsParticipatingModel> participants = new();
        var currentUser = await Http.GetFromJsonAsync<UserModel>("api/User/Current");
        if (currentUser is null || !currentUser.IsAdministrator)
        {
            NavigationManager.NavigateTo("/Tournament/List");
            return;
        }

        try
        {
            _tournaments = await Http.GetFromJsonAsync<List<TournamentModel>>("api/Tournament") ?? new List<TournamentModel>();
            _users = await Http.GetFromJsonAsync<List<UserModel>>("api/User") ?? new List<UserModel>();
            participants = await Http.GetFromJsonAsync<List<TeamIsParticipatingModel>>("/api/TeamIsParticipating") ?? new();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        if (_tournaments != null)
        {
            foreach (var tournament in _tournaments)
            {
                _numberOfParticipants.Add(tournament.Id, participants.Count(x => x.Approved && x.TournamentId == tournament.Id));
                tournament.Creator = _users?.FirstOrDefault(x => x.Id == tournament.CreatorId);
                if (tournament.WinnerTeamId is not null)
                {
                    var team = await Http.GetFromJsonAsync<TeamModel>($"api/Team/{tournament.WinnerTeamId}");
                    if (team is not null)
                    {
                        _winners.Add(tournament.Id, team.Name);
                    }
                }
            }
        }

        _isLoading = false;
    }

    private void OnItemsOnPageChanged(ChangeEventArgs e)
    {
        _selectedPageIndex = 0;
        _showCount = int.Parse(e.Value?.ToString() ?? "10");
    }

    private async Task DeleteTournamentAsync(TournamentModel tournament)
    {
        var parameters = new ModalParameters()
            .Add(nameof(ConfirmationModal.Message), "The tournament will be permanently deleted. Are you sure you want to continue?");

        var modalResult = await Modal.Show<ConfirmationModal>($"Do you really want to delete tournament {tournament.Name}?", parameters).Result;
        if (modalResult.Cancelled)
            return;
        
        var result = await Http.DeleteAsync($"/api/Tournament/{tournament.Id}");
        if (!result.IsSuccessStatusCode)
        {
            _errorMessage = "An error occurred while deleting the tournament.";
            _displayError = true;
        }
        else
        {
            _tournaments?.Remove(tournament);
            StateHasChanged();
        }
    }

    private async Task ApproveTournamentAsync(TournamentModel tournament)
    {
        tournament.IsApproved = true;
        var response = await Http.PutAsJsonAsync("/api/Tournament", tournament);
        if (!response.IsSuccessStatusCode)
        {
            _errorMessage = await response.Content.ReadAsStringAsync();
            _displayError = true;
        }
    }
}