@page "/Admin/Sports"
@using TournamentManager.Client.App.Shared.ModalComponents
@using TournamentManager.Common.Enums
@inject HttpClient Http

<PageTitle>Manage Sports</PageTitle>

        <div class="row mb-3">
            <div class="col d-xl-flex d-flex align-items-center">
                <h3 class="text-dark d-xl-flex">Sports</h3>
            </div>
            <div class="col col-auto d-flex align-items-center">
                <button class="btn btn-primary" @onclick="CreateSportAsync">Add New Sport</button>
            </div>
        </div>
        @if (_displayError)
        {
            <div class="row">
                <div class="col">
                    <MessageBox MessageType="MessageType.Error" Title="An error has occured" Message="_errorMessage"></MessageBox>
                </div>
            </div>
        }
<div class="card shadow">
    <div class="card-body shadow">
        @if(_sports is null)
        {
            <p class="text-center fw-bold">Loading...</p>
        }
        else
        {
            <div class="row">

                <div class="col-md-6 text-nowrap">
                    <div id="dataTable_length" class="dataTables_length" aria-controls="dataTable">
                        <label class="form-label">
                            Show
                            <select @onchange="OnItemsOnPageChanged" class="d-inline-block form-select form-select-sm">
                                <option value="10" selected>10</option>
                                <option value="25">25</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                        </label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div id="dataTable_filter" class="text-md-end dataTables_filter">
                        <label class="form-label">
                            <input class="form-control form-control-sm" @oninput="OnSearchQueryChanged" type="search" aria-controls="dataTable" placeholder="Search"/>
                        </label>
                    </div>
                </div>
            </div>
            @if (SportsFiltered.Count == 0)
            {
                <p class="text-center fw-bold">No sports found.</p>
            }
            else
            {
                <div id="dataTable" class="table-responsive table mt-2" role="grid" aria-describedby="dataTable_info">
                    <table id="dataTable" class="table my-0">
                        <thead>
                        <tr>
                            <th>Name</th>
                            <th>Tournament Count</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var sport in SportsFilteredPages[_selectedPageIndex])
                        {
                            <tr>
                                <td>
                                    @sport.Name
                                </td>
                                <td>
                                    @sport.Tournaments.Count
                                </td>
                                <td class="text-end">
                                    <button class="btn btn-primary btn-sm" data-bs-target="/Admin/Sport/Edit/@sport.Id" href="/Admin/Sport/Edit/@sport.Id">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteSportAsync(sport)">Delete</button>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>

                </div>
                <div class="row">
                    <div class="col-md-6 align-self-center">
                        <p id="dataTable_info" class="dataTables_info" role="status" aria-live="polite">
                            Showing @(1 + _selectedPageIndex * _showCount) to @((_showCount + _selectedPageIndex * _showCount) < SportsFiltered.Count ? (_showCount + _selectedPageIndex * _showCount) : SportsFiltered.Count) of @(SportsFiltered.Count)
                        </p>
                    </div>
                    <div class="col-md-6">
                        <nav class="d-lg-flex justify-content-lg-end dataTables_paginate paging_simple_numbers">
                            <ul class="pagination">
                                <li class="page-item @(_selectedPageIndex <= 0 ? "disabled" : "")"><a role="button" class="page-link" aria-label="Previous" @onclick="() => _selectedPageIndex--" ><span class="user-select-none" aria-hidden="true">«</span></a></li>
                                @for (var i = _selectedPageIndex - 1; i <= _selectedPageIndex + 1; i++)
                                {
                                    var num = i;
                                    if (_selectedPageIndex == 0)
                                        num = i + 1; // So user cant go to page -1
                                    else if (_selectedPageIndex >= SportsFilteredPages.Count - 1)
                                        num = i - 1; // So user cant go to a page that is too high

                                    if (num > SportsFilteredPages.Count - 1)
                                    {
                                        break; // If there are fewer than 3 pages total
                                    }
                                    else if (_selectedPageIndex == 1 && SportsFilteredPages.Count == 2 && i == 0)
                                    {
                                        // If only 2 pages are available, clicking the second one would make page 0 appear
                                        // which is obviously not possible
                                        continue;
                                    }

                                    <li class="page-item @(_selectedPageIndex == num ? "active" : "")">
                                        <a class="page-link" @onclick="() => _selectedPageIndex = num" role="button">@(num + 1)</a>
                                    </li>
                                }
                                <li class="page-item @(_selectedPageIndex >= SportsFilteredPages.Count - 1 ? "disabled" : "")">
                                    <a class="page-link" aria-label="Next" @onclick="() => _selectedPageIndex++" role="button"><span class="user-select-none" aria-hidden="true">»</span></a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    private bool _displayError;
    private string _errorMessage = string.Empty;
    
    private List<SportModel>? _sports;
    private string _search = "";
    private int _showCount = 10;
    private int _selectedPageIndex;

    private List<SportModel> SportsFiltered => _sports?
        .Where(x => x.Name.ToLower().Contains(_search.ToLower())
        )
        .OrderBy(x => x.Name)
        .ToList() ?? new(); // Filtration based on _search

    private List<List<SportModel>> SportsFilteredPages => SportsFiltered.Select((x, i) => new  // Splits the one big list into smaller lists of size _showCount
    {
        Index = i,
        Value = x
    }).GroupBy(x => x.Index / _showCount)
        .Select(x => x.Select(v => v.Value).ToList())
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        _sports = await Http.GetFromJsonAsync<List<SportModel>>("api/Sport");
    }

    private void OnSearchQueryChanged(ChangeEventArgs e)
    {
        _search = e.Value?.ToString() ?? "";
        _selectedPageIndex = 0;
    }
    
    private void OnItemsOnPageChanged(ChangeEventArgs e)
    {
        _selectedPageIndex = 0;
        _showCount = int.Parse(e.Value?.ToString() ?? "10");
    }

    private async Task DeleteSportAsync(SportModel sport)
    {
        var parameters = new ModalParameters()
            .Add(nameof(ConfirmationModal.Message), $"The sport will be permanently deleted. Are you sure you want to delete {sport.Name}?");
        
        var result = await Modal.Show<ConfirmationModal>("Confirmation", parameters).Result;
        if (result.Cancelled)
            return;
        
        var response = await Http.DeleteAsync($"api/Sport/{sport.Id}");
        if (!response.IsSuccessStatusCode)
        {
            _errorMessage = await response.Content.ReadAsStringAsync();
            _displayError = true;
        }
        else
        {
            _sports = await Http.GetFromJsonAsync<List<SportModel>>("api/Sport");
        }
    }

    private async Task EditSportAsync(SportModel sport)
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditSportModal.Sport), (SportModel)sport.Clone());
        
        var modalResult = await Modal.Show<EditSportModal>("Edit Sport", parameters).Result;
        if (modalResult.Confirmed)
            _sports = await Http.GetFromJsonAsync<List<SportModel>>("api/Sport");
    }

    private async Task CreateSportAsync()
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditSportModal.Sport), new SportModel(String.Empty));
        
        var modalResult = await Modal.Show<EditSportModal>("Create Sport", parameters).Result;
        if (modalResult.Confirmed)
            _sports = await Http.GetFromJsonAsync<List<SportModel>>("api/Sport");
    }
}