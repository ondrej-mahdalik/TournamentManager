@page "/Tournament/Detail/{Id}"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using TournamentManager.Client.App.Shared.ModalComponents
@inject HttpClient Http
@inject PublicHttpClient PublicHttp
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Tournament Detail</PageTitle>

<div id="wrapper">
<div class="d-flex flex-column" id="content-wrapper">
<div id="content">
    <div class="container-fluid">
        @if (_tournament is null)
        {
            <div class="card shadow">
                <div class="card-body">
                    <p class="text-center fw-bold">Loading...</p>
                </div>
            </div>
        }
        else
        {
            <div class="row mb-3">
                <div class="col text-center d-xl-flex d-flex align-items-center">
                    <h3 class="text-dark d-xl-flex">@_tournament.Name</h3>
                </div>
                <div class="col col-auto"><a href="/Tournament/list"><button class="btn btn-light" type="button">Back to All Tournaments</button></a></div>
                @if (_tournament.Participatings.Count < _tournament.MaxAttendees && !_tournament.InProgress)
                {
                    <AuthorizeView>
                        <Authorized>
                            <div class="col col-auto"><a class="btn btn-primary" @onclick="ParticipateAsync">Participate</a></div>
                        </Authorized>
                        <NotAuthorized>
                            <div class="col col-auto"><a class="btn btn-primary" href="authentication/login">Participate</a></div>
                        </NotAuthorized>
                    </AuthorizeView>
                }
                @if (_loggedUser?.Id == _tournament.CreatorId)
                {
                    <div class="col col-auto"><a href="/Tournament/Manage/@_tournament.Id"><button class="btn btn-primary" type="button">Manage Tournament</button></a></div>
                }
            </div>
            <div class="row mb-4">
                <div class="col">
                    <div class="card shadow">
                        <div class="card-body">

                            <div class="row mb-3">
                                <div class="col">
                                    <div>
                                        <h6 class="text-primary">Date</h6><span>@_tournament.Date.ToString("dd. MM. yyyy")</span>
                                    </div>
                                </div>
                                <div class="col">
                                    <div>
                                        <h6 class="text-primary">Players participating</h6><span>@_numberOfParticipants/@_tournament.MaxAttendees</span>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div>
                                        <h6 class="text-primary">Description</h6>
                                        <p>@_tournament.Description<br></p>
                                    </div>
                                </div>
                                <div class="col">
                                    <div>
                                        <h6 class="text-primary">Sport</h6>
                                        <p>@(_tournament.Sport is not null ? _tournament.Sport.Name : "Other")<br></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <h4 class="text-center text-primary">Tournament Matches</h4>
                </div>
            </div>

            <div class="row">
                @if (_matches is not null)
                {
                    @if (_matches.Count == 0)
                    {
                        <p class="text-center fw-bold">Tournament has no matches</p>
                    }
                    foreach (var match in _matches)
                    {
                        <div class="col-4">
                            <div class="card shadow mb-4">
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col">
                                            <h6 class="text-primary">Round @match.Round</h6>
                                        </div>
                                        <div class="col">
                                            <p>25. 5. 2020<br></p>
                                        </div>
                                    </div>
                                    <div class="row border-bottom mb-2">
                                        <div class="col">
                                            <p>
                                                @if (!string.IsNullOrWhiteSpace(match.Team1?.LogoUrl))
                                                {
                                                    <img alt="team1-image" class="img-fluid" width="60" height="60" src="@match.Team1?.LogoUrl">
                                                }
                                                @match.Team1?.Name
                                            </p>
                                        </div>
                                        <div class="col align-self-center">
                                            <p class="lead text-center">@match.Score1</p>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col">
                                            <p>
                                                @if (!string.IsNullOrWhiteSpace(match.Team2?.LogoUrl))
                                                {
                                                    <img alt="team2-image" class="img-fluid" width="60" height="60" src="@match.Team2?.LogoUrl">
                                                }
                                                @match.Team2?.Name
                                            </p>
                                        </div>
                                        <div class="col align-self-center">
                                            <p class="lead text-center">@match.Score2</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        }
    </div>
</div>
</div>
</div>

@code {
    [Parameter]
    public string? Id { get; set; }
    
    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    private TournamentModel? _tournament;
    private UserModel? _loggedUser;
    private List<MatchModel>? _matches;
    private int _numberOfParticipants;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity?.IsAuthenticated ?? false)
        {
            try
            {
                _tournament = await Http.GetFromJsonAsync<TournamentModel>($"/api/Tournament/{Id}");
                _loggedUser = await Http.GetFromJsonAsync<UserModel>("/api/User/current");
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
        else
        {
            _tournament = await PublicHttp.Client.GetFromJsonAsync<TournamentModel>($"/api/Tournament/{Id}");
        }

        _numberOfParticipants = _tournament?.Participatings.Count(x => x.Approved) ?? 0;
        _matches = _tournament?.Matches.OrderBy(x => x.Round).ThenBy(x => x.Order).ToList() ?? new List<MatchModel>();
    }
    
    private async Task ParticipateAsync()
    {
        if (_loggedUser is null)
            return;

        var parameters = new ModalParameters()
            .Add(nameof(ParticipateAsTeam.CurrentUser), _loggedUser);
        
        var result = await Modal.Show<ParticipateAsTeam>("Choose Team", parameters).Result;
        if (result.Confirmed)
        {
            var team = result.Data as TeamModel;
        }
    }
}