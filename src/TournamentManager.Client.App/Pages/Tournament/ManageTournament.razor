@page "/Tournament/Manage/{Id}"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using TournamentManager.Client.App.Shared.ModalComponents
@using TournamentManager.Common.Enums
@using System.Text.RegularExpressions
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Manage Tournament</PageTitle>

<div id="wrapper">
<div class="d-flex flex-column" id="content-wrapper">
<div id="content">
<div class="container-fluid">
 @if (@_isLoading)
    {
        <div class="card shadow">
        <div class="card-body">
            <p class="text-center fw-bold">Loading...</p>
        </div>
        </div>
    }
 else
 {
     <div class="row mb-3">
         <div class="col d-flex align-items-center">
             <h3 class="text-dark d-flex">@_tournament?.Name</h3>
         </div>
         <div class="col col-auto"><a href="/Tournament/Detail/@_tournament?.Id"><button class="btn btn-light" type="button">Back to the Tournament Detail</button></a></div>
         @if (_loggedUser is not null && _loggedUser.Id == _tournament?.CreatorId)
         {
             <div class="col col-auto d-flex align-items-center"><button class="btn btn-danger" @onclick="DeleteTournament" type="button">Delete Tournament</button></div>
         }

         @if (_tournament is not null && _tournament.IsApproved && _loggedUser?.Id == _tournament?.CreatorId &&
              !_tournament!.InProgress && _approvedParticipants?.Count > 1)
         {
             <div class="col col-auto d-flex align-items-center"><button class="btn btn-success" @onclick="StartTournament" type="button">Start Tournament</button></div>
         }
     </div>
     
     @if (!_resultOk)
     {
         <div class="row">
             <div class="col">
                 @if (_allTeamsHaveMatch)
                 {

                     <MessageBox MessageType="MessageType.Error" Title="Error" Message="@_errorMessage" ShowCloseButton="true"></MessageBox>

                     <MessageBox MessageType="MessageType.Warning" Title="Warning" Message="Not all participants have a match assigned" ShowCloseButton="false"></MessageBox>

                 }
                 
             </div>
         </div>
     }
     <div class="row w-75">
         <div class="col">
             <div class="card shadow mb-4">
                 <div class="card-body">
                     <div class="row">
                         <div class="col">
                             <EditForm Model="@_model" OnValidSubmit="@HandleValidSubmit">
                                 <DataAnnotationsValidator/>
                                 <ValidationSummary/>
                                 <div class="mb-2"><label class="form-label" for="name">Name</label><InputText id="name" name="name" class="form-control" type="text" @bind-Value="_model.Name"/></div>
                                 <div class="mb-2"><label class="form-label" for="description">Description (optional)</label><InputTextArea id="description" name="description" @bind-Value="_model.Description" class="form-control"/></div>
                                 @if (_tournament != null && !_tournament.InProgress)
                                 {
                                     <div class="mb-2"><label class="form-label" for="date">Date of beginning</label><InputDate TValue="DateTime" id="date" name="date" class="form-control" @bind-Value="_model.Date" Type="InputDateType.Date"></InputDate></div>
                                     <div class="mb-2"><label class="form-label" for="sport">Sport</label>
                                         <InputSelect TValue="Guid?" id="sport" name="sport" class="form-select" @bind-Value="_model.SportId">
                                             @if (_sports != null)
                                             {
                                                 foreach (var sport in _sports)
                                                 {
                                                     <option value="@sport.Id">@sport.Name</option>
                                                 }
                                             }
                                             <option value="">Other</option>
                                         </InputSelect>
                                     </div>
                                     <div class="mb-2"><label class="form-label" for="signup-type">Play mode</label>
                                         <select id="signup-type" name="signup-type" class="form-select">
                                             <option value="12" selected>Individual</option>
                                             <option value="13">Teams</option>
                                         </select>
                                     </div>
                                     <div class="mb-2"><label class="form-label" for="max-players">Maximum number of players</label><InputNumber TValue="int" id="max-players" name="max-players" @bind-Value="_model.MaxAttendees" class="form-control" min="1" type="number" style="width: 30%;"></InputNumber></div>
                                     <div class="mb-2">
                                         <div class="form-check form-switch"><label class="form-check-label" for="formCheck-1">Public</label><InputCheckbox class="form-check-input" type="checkbox" id="formCheck-1" @bind-Value="_model.IsPublic"></InputCheckbox></div>
                                     </div>
                                 }
                                 <div class="d-xl-flex justify-content-xl-end"><button class="btn btn-primary text-end d-xl-flex" type="submit">Save Changes</button></div>
                             </EditForm>
                         </div>
                     </div>
                 </div>
             </div>
         </div>
     </div>
     
     <div class="row mb-4">
     <div class="col">
         <div class="card shadow mb-4">
             <div class="card-header">
                 <h6 class="text-primary mb-0">Pending sign-ups</h6>
             </div>
             <div class="card-body">
                 @if (_pendingParticipants is not null)
                 {
                     <div class="row">
                         <div class="col-md-6 text-nowrap">
                             <div id="dataTable_length" class="dataTables_length" aria-controls="dataTable">
                                 <label class="form-label">Show&nbsp;
                                     <select @onchange="OnItemsOnPageChanged" class="d-inline-block form-select form-select-sm">
                                         <option value="10" selected="selected">10</option>
                                         <option value="25">25</option>
                                         <option value="50">50</option>
                                         <option value="100">100</option>
                                     </select>&nbsp;
                                 </label>
                             </div>
                         </div>
                         <div class="col-md-6">
                             <div class="text-md-end dataTables_filter" id="dataTable_filter"><label class="form-label"><input type="search" @oninput="OnSearchQueryChanged" class="form-control form-control-sm" aria-controls="dataTable" placeholder="Search"></label></div>
                         </div>
                     </div>
                     <div class="table-responsive table mt-2" id="dataTable-1" role="grid" aria-describedby="dataTable_info">
                         @if (PendingParticipantsFiltered.Count == 0)
                         {
                             <p class="text-center fw-bold">No pending participants found</p>
                         }
                         else
                         {
                             <table class="table my-0" id="dataTable">
                                 <thead>
                                 <tr>
                                     <th>@(_tournament != null && _tournament.IsIndividual ? "Player Name" : "Team Name")</th>
                                     @if (_tournament != null && !_tournament.IsIndividual)
                                     {
                                        <th>Team Leader</th>
                                     }
                                     <th>Date Registered</th>
                                     <th>Actions</th>
                                 </tr>
                                 </thead>
                                 <tbody>
                                 @foreach (var participant in PendingParticipantsFilteredPages[_selectedPageIndex])
                                 {
                                     var leader = _teamLeaders?.Where(x => x.Id == participant.Team?.LeaderId).ToList()[0];
                                     <tr>
                                         <td>@participant.Team?.Name</td>
                                         @if (_tournament != null && !_tournament.IsIndividual)
                                         {
                                             <td>@leader?.FirstName @leader?.LastName</td>
                                         }
                                         <td>@participant.CreatedOn.ToString("dd. MM. yyyy")</td>
                                         <td class="@(_tournament != null && _tournament.IsIndividual ? "" : "text-center")"><i @onclick="() => ApproveParticipant(participant)" class="fas fa-user-check me-1" data-bs-toggle="tooltip" data-bss-tooltip="" data-bs-placement="right" title="Approve participant"></i><i @onclick="() => DeleteParticipant(participant)" class="fas fa-user-times" data-bs-toggle="tooltip" data-bss-tooltip="" data-bs-placement="right" title="Reject participant"></i></td>
                                     </tr>
                                 }
                                 </tbody>
                                 <tfoot>
                                 <tr></tr>
                                 </tfoot>
                             </table>
                         }
                     </div>
                     <div class="row">
                         @if (PendingParticipantsFiltered.Count > 0)
                         {
                             <div class="col-md-6 align-self-center">
                                 <p id="dataTable_info" class="dataTables_info" role="status" aria-live="polite">Showing @(1 + _selectedPageIndex * _showCount) to @((_showCount + _selectedPageIndex * _showCount) < PendingParticipantsFiltered.Count ? (_showCount + _selectedPageIndex * _showCount) : PendingParticipantsFiltered.Count) of @(PendingParticipantsFiltered.Count)</p></div>
                             <div class="col-md-6">
                                 <nav class="d-lg-flex justify-content-lg-end dataTables_paginate paging_simple_numbers">
                                     <ul class="pagination">
                                         <li class="page-item @(_selectedPageIndex <= 0 ? "disabled" : "")"><a role="button" class="page-link" aria-label="Previous" @onclick="() => _selectedPageIndex--"><span class="user-select-none" aria-hidden="true">«</span></a></li>
                                         @for (var i = _selectedPageIndex - 1; i <= _selectedPageIndex + 1; i++)
                                         {
                                             var num = i;
                                             if (_selectedPageIndex == 0)
                                                 num = i + 1; // So user cant go to page -1

                                             else if (_selectedPageIndex >= PendingParticipantsFilteredPages.Count - 1)
                                                 num = i - 1; // So user cant go to a page that is too high

                                             if (num > PendingParticipantsFilteredPages.Count - 1)
                                             {
                                                 break; // If there are fewer than 3 pages total
                                             }
                                             if (_selectedPageIndex == 1 && PendingParticipantsFilteredPages.Count == 2 && i == 0)
                                             {
                                                 // If only 2 pages are available, clicking the second one would make page 0 appear
                                                 // which is obviously not possible
                                                 continue;
                                             }

                                             <li class="page-item @(_selectedPageIndex == num ? "active" : "")">
                                                 <a class="page-link" @onclick="() => _selectedPageIndex = num" role="button">@(num + 1)</a>
                                             </li>
                                         }
                                         <li class="page-item @(_selectedPageIndex >= @PendingParticipantsFilteredPages.Count - 1 ? "disabled" : "")">
                                             <a class="page-link" aria-label="Next" @onclick="() => _selectedPageIndex++" role="button"><span class="user-select-none" aria-hidden="true">»</span></a>
                                         </li>
                                     </ul>
                                 </nav>
                             </div>
                         }
                     </div>
                 }
             </div>
         </div>
     </div>
     <div class="col">
         <div class="card shadow mb-4">
             <div class="card-header">
                 <h6 class="text-primary mb-0">Participants</h6>
             </div>
             <div class="card-body">
                 <div class="row">
                         <div class="col-md-6 text-nowrap">
                             <div id="dataTable_length" class="dataTables_length" aria-controls="dataTable">
                                 <label class="form-label">Show&nbsp;
                                     <select @onchange="OnItemsOnPageChanged2" class="d-inline-block form-select form-select-sm">
                                         <option value="10" selected="selected">10</option>
                                         <option value="25">25</option>
                                         <option value="50">50</option>
                                         <option value="100">100</option>
                                     </select>&nbsp;
                                 </label>
                             </div>
                         </div>
                         <div class="col-md-6">
                             <div class="text-md-end dataTables_filter" id="dataTable_filter"><label class="form-label"><input type="search" @oninput="OnSearchQueryChanged2" class="form-control form-control-sm" aria-controls="dataTable" placeholder="Search"></label></div>
                         </div>
                     </div>
                     <div class="table-responsive table mt-2" id="dataTable-1" role="grid" aria-describedby="dataTable_info">
                         @if (ApprovedParticipantsFiltered.Count == 0)
                         {
                             <p class="text-center fw-bold">No participants found</p>
                         }
                         else
                         {
                             <table class="table my-0" id="dataTable">
                                 <thead>
                                 <tr>
                                     <th>@(_tournament != null && _tournament.IsIndividual ? "Player Name" : "Team Name")</th>
                                      @if (_tournament != null && !_tournament.IsIndividual)
                                      {
                                         <th>Team Leader</th>
                                      }
                                     <th>Date Registered</th>
                                     @if (_tournament is not null && !_tournament.InProgress)
                                     {
                                         <th>Actions</th>
                                     }
                                 </tr>
                                 </thead>
                                 <tbody>
                                 @foreach (var participant in ApprovedParticipantsFilteredPages[_selectedPageIndex2])
                                 {
                                     var leader = _teamLeaders?.Where(x => x.Id == participant.Team?.LeaderId).ToList()[0];
                                     <tr>
                                         <td>@participant.Team?.Name</td>
                                         @if (_tournament != null && !_tournament.IsIndividual)
                                          {
                                              <td>@leader?.FirstName @leader?.LastName</td>
                                          }
                                         <td>@participant.CreatedOn.ToString("dd. MM. yyyy")</td>
                                         <td class=@(_tournament != null && _tournament.IsIndividual ? "" : "text-center")>
                                             @if (_tournament is not null && !_tournament.InProgress)
                                             {
                                                 <i @onclick="() => DeleteParticipant(participant)" class="fas fa-user-times" data-bs-toggle="tooltip" data-bss-tooltip="" data-bs-placement="right" title="Reject participant"></i>
                                             }
                                         </td>
                                     </tr>
                                 }
                                 </tbody>
                                 <tfoot>
                                 <tr></tr>
                                 </tfoot>
                             </table>
                         }
                     </div>
                     <div class="row">
                         @if (_approvedParticipants is {Count: > 0 })
                         {
                             <div class="col-md-6 align-self-center">
                                 <p id="dataTable_info" class="dataTables_info" role="status" aria-live="polite">Showing @(1 + _selectedPageIndex2 * _showCount2) to @((_showCount2 + _selectedPageIndex2 * _showCount2) < ApprovedParticipantsFiltered.Count ? (_showCount2 + _selectedPageIndex2 * _showCount2) : ApprovedParticipantsFiltered.Count) of @(ApprovedParticipantsFiltered.Count)</p></div>
                             <div class="col-md-6">
                                 <nav class="d-lg-flex justify-content-lg-end dataTables_paginate paging_simple_numbers">
                                     <ul class="pagination">
                                         <li class="page-item @(_selectedPageIndex2 <= 0 ? "disabled" : "")"><a role="button" class="page-link" aria-label="Previous" @onclick="() => _selectedPageIndex2--"><span class="user-select-none" aria-hidden="true">«</span></a></li>
                                         @for (var i = _selectedPageIndex2 - 1; i <= _selectedPageIndex2 + 1; i++)
                                         {
                                             var num = i;
                                             if (_selectedPageIndex2 == 0)
                                                 num = i + 1; // So user cant go to page -1

                                             else if (_selectedPageIndex2 >= ApprovedParticipantsFilteredPages.Count - 1)
                                                 num = i - 1; // So user cant go to a page that is too high

                                             if (num > ApprovedParticipantsFilteredPages.Count - 1)
                                             {
                                                 break; // If there are fewer than 3 pages total
                                             }
                                             if (_selectedPageIndex2 == 1 && ApprovedParticipantsFilteredPages.Count == 2 && i == 0)
                                             {
                                                 // If only 2 pages are available, clicking the second one would make page 0 appear
                                                 // which is obviously not possible
                                                 continue;
                                             }

                                             <li class="page-item @(_selectedPageIndex2 == num ? "active" : "")">
                                                 <a class="page-link" @onclick="() => _selectedPageIndex2 = num" role="button">@(num + 1)</a>
                                             </li>
                                         }
                                         <li class="page-item @(_selectedPageIndex2 >= @ApprovedParticipantsFilteredPages.Count - 1 ? "disabled" : "")">
                                             <a class="page-link" aria-label="Next" @onclick="() => _selectedPageIndex2++" role="button"><span class="user-select-none" aria-hidden="true">»</span></a>
                                         </li>
                                     </ul>
                                 </nav>
                             </div>
                         }
                     </div>
                     </div>
         </div>
     </div>
     </div>
     <div class="row">
         <div class="col">
             <h4 class="text-center text-primary"><span style="color: rgba(var(--bs-primary-rgb), var(--bs-text-opacity)) ;">Tournament Matches</span><br></h4>
         </div>
        @if (_generateMoreMatches)
        {
            <div class="row mb-3">
                <div class="col d-flex justify-content-end">
                    <button class="btn btn-primary text-center d-flex" @onclick="GenerateMoreMatches">Generate More Matches</button>
                </div>
            </div>
        }
     </div>
     @if (_teamIsInMultipleMatches)
     {
         <div class="row">
             <div class="col">
                 <MessageBox MessageType="MessageType.Warning" Title="Warning" Message="A team is in more than one match within one round."></MessageBox>
             </div>
         </div>
     }
     @if (!_allTeamsHaveMatch)
     {
         <div class="row">
             <div class="col">
                 <MessageBox MessageType="MessageType.Warning" Title="Warning" Message="Not all teams have a match assigned."></MessageBox>
             </div>
         </div>
     }
     <div class="row">
         @if (_matches is null)
         {
             <p class="text-center fw-bold">Loading...</p>
         }
         else if (_matches.Count == 0 || _generatingMoreMatches)
         {
            <p class="text-center fw-bold">@_message</p>
         }
         else
         {
             foreach (var match in _matches)
             {
                 <div class="col-4">
                     <div class="card mb-4 shadow">
                         <div class="card-body">
                             <div class="row">
                                 <div class="col-6">
                                     @if (_tournament != null && match.Round == _tournament.NumOfRounds)
                                     {
                                         <h6 class="text-primary fw-bold">Final</h6>
                                     }
                                     else
                                     {
                                        <h6 class="text-primary">Round @match.Round</h6>
                                     }
                                 </div>

                                
                             </div>
                             <div class="row">
                                 <div class="col">
                                     <p>
                                         @if (match.Team1 is not null && (match.Team1?.LogoUrl is not null && match.Team1?.LogoUrl != ""))
                                         {
                                             <img alt="team1-image" class="rounded-circle me-2" width="30" height="30" src="@match.Team1?.LogoUrl">
                                         }
                                         @match.Team1?.Name
                                     </p>
                                 </div>
                                 <div class="col align-self-center">
                                     <p class="lead text-center">@match.Score1</p>
                                 </div>
                             </div>
                             <div class="row">
                                 <div class="col">
                                     <p>
                                         @if (match.Team2 is not null && (match.Team2?.LogoUrl is not null && match.Team2?.LogoUrl != ""))
                                         {
                                             <img alt="team2-image" class="rounded-circle me-2" width="30" height="30" src="@match.Team2?.LogoUrl">
                                         }
                                         @match.Team2?.Name
                                     </p>
                                 </div>
                                 <div class="col align-self-center">
                                     <p class="lead text-center">@match.Score2</p>
                                 </div>
                             </div>
                                 <div class="row justify-content-end">
                                     <div class="col col-auto">
                                         @if (!match.IsLocked)
                                         {
                                             <button class="btn btn-primary me-1" type="button" @onclick="() => ManageTournamentAsync(match)">Manage</button>
                                         }
                                         @if (_tournament != null && _showWinner && match.Round == _tournament.NumOfRounds)
                                         {
                                             <button class="btn btn-success me-1" type="button" @onclick="() => ChooseWinner(match)">Choose Winner</button>
                                         }
                                     </div>
                                 </div>
                         </div>
                     </div>
                 </div>
             }
         }
     </div>
 }
</div>
</div>
</div>
</div>

@code {

    [Parameter]
    public string? Id { get; set; }
    
    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    private TournamentModel? _tournament;
    private UserModel? _loggedUser;
    private List<MatchModel>? _matches;
    private List<TeamIsParticipatingModel>? _approvedParticipants;
    private List<TeamIsParticipatingModel>? _pendingParticipants;
    private List<UserModel>? _teamLeaders;
    private List<SportModel>? _sports;
    private TournamentModel _model = TournamentModel.Empty;
    private List<MatchModel> _editedMatches = new();

    private bool _isLoading;
    private int _showCount = 10;
    private int _showCount2 = 10;
    private int _selectedPageIndex;
    private int _selectedPageIndex2;
    private string _message = "Tournament has no matches";
    private string _searchPending = "";
    private string _searchApproved = "";
    private bool _allTeamsHaveMatch = true;
    private bool _generateMoreMatches;
    private bool _generatingMoreMatches;
    private bool _showWinner;

    private bool _resultOk = true;
    private string _errorMessage = string.Empty;

    private List<TeamIsParticipatingModel> PendingParticipantsFiltered => _pendingParticipants?
        .Where(x =>
        {
            var name = x.Team != null && x.Team.Name.ToLower().Contains(_searchPending.ToLower());
            return name;
        }).ToList() ??
    new ();
    
    private List<TeamIsParticipatingModel> ApprovedParticipantsFiltered => _approvedParticipants?
        .Where(x =>
        {
            var name = x.Team != null && x.Team.Name.ToLower().Contains(_searchApproved.ToLower());
            return name;
        }).ToList() ?? new ();
    
    private List<List<TeamIsParticipatingModel>> ApprovedParticipantsFilteredPages => ApprovedParticipantsFiltered.Select((x, i) => new  // Splits the one big list into smaller lists of size _showCount
    {
        Index = i,
        Value = x
    }).GroupBy(x => x.Index / _showCount)
        .Select(x => x.Select(v => v.Value).ToList())
        .ToList();
    
    private List<List<TeamIsParticipatingModel>> PendingParticipantsFilteredPages => PendingParticipantsFiltered.Select((x, i) => new  // Splits the one big list into smaller lists of size _showCount
    {
        Index = i,
        Value = x
    }).GroupBy(x => x.Index / _showCount)
        .Select(x => x.Select(v => v.Value).ToList())
        .ToList();
    

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            _tournament = await Http.GetFromJsonAsync<TournamentModel>($"/api/Tournament/{Id}");
            _matches = _tournament?.Matches.OrderBy(x => !x.IsLocked).ThenBy(x => x.Round).ThenBy(x => x.Order).ToList() ?? new();
            var allParticipants = await Http.GetFromJsonAsync<List<TeamIsParticipatingModel>>("/api/TeamIsParticipating") ?? new();
            _approvedParticipants = allParticipants.Where(x => x.TournamentId == _tournament?.Id && x.Approved).ToList();
            _pendingParticipants = allParticipants.Where(x => x.TournamentId == _tournament?.Id && !x.Approved).OrderBy(x => x.CreatedOn).ToList();
            _sports = await Http.GetFromJsonAsync<List<SportModel>>("/api/Sport") ?? new();
            _teamLeaders = new();

            if (_tournament is not null)
            {
                _model = (TournamentModel) _tournament.Clone();
            }
            
            CheckIfAllParticipantsHaveMatch();
            CheckTeamIsInMultipleMatches();
            _isLoading = false;
            
            foreach (var participant in allParticipants)
            {
                var teamLeaderId = (await Http.GetFromJsonAsync<TeamModel>($"/api/Team/{participant.TeamId}"))?.LeaderId;
                if (teamLeaderId is null) continue;
                
                var teamLeader = await Http.GetFromJsonAsync<UserModel>($"/api/User/{teamLeaderId}");
                if (teamLeader is not null)
                {
                    _teamLeaders.Add(teamLeader);
                }
            }



            _loggedUser = await Http.GetFromJsonAsync<UserModel>("/api/User/current");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task HandleValidSubmit()
    {
        _model.CreatorId = _tournament?.CreatorId;
        var result = await Http.PutAsJsonAsync("api/Tournament", _model);
        if (!result.IsSuccessStatusCode)
        {
            _resultOk = false;
        }
        else
        {
            _resultOk = true;
            Navigation.NavigateTo($"/Tournament/Detail/{@_tournament?.Id}");   
        }
        
    }

    private void CheckIfAllParticipantsHaveMatch()
    {
        if (_approvedParticipants is not null && _approvedParticipants.Count > 1)
        {
            _allTeamsHaveMatch = _approvedParticipants.All(x =>
            {
                return _matches is not null && _matches.Any(y => y.Team1Id == x.TeamId || y.Team2Id == x.TeamId);
            });
        }
        _resultOk = _allTeamsHaveMatch;
    }

    private async Task DeleteTournament()
    {
        try
        {
            if (_tournament is not null)
            {
                var message = new ModalParameters().Add(nameof(Confirmation.Message), "Are you sure you want to delete the tournament? This action cannot be undone.");
                var result = await Modal.Show<Confirmation>("Delete the Tournament", message).Result;
                if (result.Confirmed)
                {
                    var response = await Http.DeleteAsync($"/api/Tournament/{_tournament.Id}");
                    if (response.IsSuccessStatusCode)
                    {
                        Navigation.NavigateTo("/Tournament/List");
                        _errorMessage = "";
                    }
                    else
                    {
                        _resultOk = false;
                        _errorMessage = "Unable to delete the tournament.";
                    }
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task ApproveParticipant(TeamIsParticipatingModel? participant)
    {
        if (participant is not null && _tournament is not null && !_tournament.InProgress)
        {
            participant.Approved = true;
            var result = await Http.PutAsJsonAsync("/api/TeamIsParticipating", participant);
            if (!result.IsSuccessStatusCode)
            {
                participant.Approved = false;
                _resultOk = false;
                _errorMessage = "Unable to approve the participant.";
            }
            else
            {
                _resultOk = true;
                _errorMessage = "";
                _pendingParticipants?.Remove(participant);
                _approvedParticipants?.Add(participant);
                _approvedParticipants?.Sort((x, y) => String.CompareOrdinal(x.Team?.Name, y.Team?.Name));
            }
        }
    }

    private async Task DeleteParticipant(TeamIsParticipatingModel? participant)
    {
        if (participant is not null && _tournament is not null && !_tournament.InProgress)
        {
            try
            {
                var result = await Http.DeleteAsync($"/api/TeamIsParticipating/{participant.Id}");
                if (result.IsSuccessStatusCode)
                {
                    _pendingParticipants?.Remove(participant);
                    _approvedParticipants?.Remove(participant);
                    _resultOk = true;
                    _errorMessage = "";
                }
                else
                {
                    _resultOk = false;
                    _errorMessage = "Unable to delete the participant.";
                }

            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }

    private async Task StartTournament()
    {
        if (_tournament is not null && _approvedParticipants is not null)
        {
            _tournament.InProgress= true;
            _tournament.NumOfRounds = (int) Math.Ceiling(Math.Log2(_approvedParticipants.Count));
            var result = await Http.PutAsJsonAsync("/api/Tournament", _tournament);
            if (!result.IsSuccessStatusCode)
            {
                _tournament.InProgress = false;
                _resultOk = false;
                _errorMessage = "Unable to start the tournament";
            }
            else
            {
                _resultOk = true;
                _errorMessage = "";
                _message = "Generating matches...";
                StateHasChanged();
                await GenerateMatches();
                if (_resultOk)
                {
                    await DeletePendingParticipants();
                }
            }
        }
    }

    private async Task GenerateMatches()
    {
        var matchesToGenerate = new List<MatchModel>();
        if (_approvedParticipants is null || _tournament is null) return;
        
        var randomOrderParticipants = _approvedParticipants.GetRange(0, _approvedParticipants.Count)
            .OrderBy(_ => Guid.NewGuid()).ToList(); // Randomize the order of the participants
        
        var matchesInFirstRound = randomOrderParticipants.Count - Math.Pow(2, Math.Floor(Math.Log2(randomOrderParticipants.Count)));
        var order = 1;
        if (matchesInFirstRound == 0)
        {
            for (var i = 0; i < randomOrderParticipants.Count; i += 2)
            {
                var match = new MatchModel(_tournament.Id, 0, 0, 1, order++, false)
                {
                    Team1Id = randomOrderParticipants[i].TeamId,
                    Team2Id = randomOrderParticipants[i+1].TeamId
                };
                matchesToGenerate.Add(match);
            }
        }
        else
        {
            var i = 0;
            for (; i < matchesInFirstRound * 2; i += 2)
            {
                var match = new MatchModel(_tournament.Id, 0, 0, 1, order++, false)
                {
                    Team1Id = randomOrderParticipants[i].TeamId,
                    Team2Id = randomOrderParticipants[i + 1].TeamId
                };
                var result = await Http.PutAsJsonAsync("/api/Match", match);
                if (!result.IsSuccessStatusCode)
                {
                    return;
                }
            }
            order = (order / 2) + 1;
            for (; i < randomOrderParticipants.Count; i += 2)
            {
                var match = new MatchModel(_tournament.Id, 0, 0, 2, order--, false)
                {
                    Team1Id = randomOrderParticipants[i].TeamId,
                    Team2Id = i + 1 < randomOrderParticipants.Count ? randomOrderParticipants[i+1].TeamId : null
                };
                matchesToGenerate.Add(match);
            }
        }
        
        var response = await Http.PutAsJsonAsync("/api/Match/multiple", matchesToGenerate);
        if (!response.IsSuccessStatusCode)
        {
            _resultOk = false;
            _errorMessage = "Unable to generate matches";
        }
        else
        {
            _resultOk = true;
            _errorMessage = "";
        }

        _matches = (await Http.GetFromJsonAsync<TournamentModel>($"/api/Tournament/{_tournament.Id}"))?.Matches.OrderBy(x => x.Round).ThenBy(x => x.Order).ToList() ?? new();
        StateHasChanged();
    }

    private async Task DeletePendingParticipants()
    {
        if (_pendingParticipants is not null)
        {
            try
            {
                List<TeamIsParticipatingModel> participantsToRemove = new();
                participantsToRemove.AddRange(_pendingParticipants);
                foreach (var participant in participantsToRemove)
                {
                    var result = await Http.DeleteAsync($"/api/TeamIsParticipating/{participant.Id}");
                    if (!result.IsSuccessStatusCode)
                    {
                        _resultOk = false;
                        _errorMessage = "Unable to delete all pending participants";
                        break;
                    }
                    
                    _resultOk = true;
                    _errorMessage = "";
                    _pendingParticipants.Remove(participant);
                }
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }
     
    private void OnItemsOnPageChanged(ChangeEventArgs e)
    {
        _selectedPageIndex = 0;
        _showCount = int.Parse(e.Value?.ToString() ?? "10");
    }
    
    private void OnItemsOnPageChanged2(ChangeEventArgs e)
    {
        _selectedPageIndex2 = 0;
        _showCount2 = int.Parse(e.Value?.ToString() ?? "10");
    }

    private void OnSearchQueryChanged(ChangeEventArgs e)
    {
        _searchPending = e.Value?.ToString() ?? "";
        _selectedPageIndex = 0;
    }
    
    private void OnSearchQueryChanged2(ChangeEventArgs e)
    {
        _searchApproved = e.Value?.ToString() ?? "";
        _selectedPageIndex2 = 0;
    }
    
    private async Task ManageTournamentAsync(MatchModel match)
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditMatch.Match), match);
        
        var result = await Modal.Show<EditMatch>("Edit Match", parameters).Result;
        if (result.Confirmed)
        {
            _matches = null;
            await OnInitializedAsync();
            if (!_editedMatches.Any(x => x.Id == match.Id))
            {
                _editedMatches.Add(match);
            }
            if (_tournament != null && _tournament.NumOfRounds != match.Round)
                _generateMoreMatches = true;
            else
                _showWinner = true;
        }
    }

    private async Task GenerateMoreMatches()
    {
        var message = new ModalParameters().Add(nameof(Confirmation.Message), "Are you sure you want to generate more matches? You won't be able to edit the previous ones.");
        var result = await Modal.Show<Confirmation>("Generate More Matches", message).Result;
        if (result.Confirmed && _matches is not null && _tournament is not null)
        {
            _generateMoreMatches = false;
            _generatingMoreMatches = true;
            StateHasChanged();
            List<MatchModel> lockedMatches = new();
            foreach (var match in _editedMatches)
            {
                match.IsLocked = true;
                lockedMatches.Add(match);
                
                var subsequentOrder = (int) (match.Order / 2.0 + 0.5);
                var subsequentMatch = _matches.FirstOrDefault(x => x.Round == match.Round + 1 && x.Order == subsequentOrder);
                var matchWinner = match.Score1 >= match.Score2 ? match.Team1Id : match.Team2Id;
                if (subsequentMatch is null)
                {
                    subsequentMatch = new MatchModel(_tournament.Id, 0, 0, match.Round + 1, subsequentOrder, false)
                    {
                        Team1Id = matchWinner,
                        Team2Id = null
                    };
                }
                else
                {
                    subsequentMatch.Team2Id = matchWinner;
                }
                var response = await Http.PutAsJsonAsync("/api/Match", subsequentMatch);
                if (response.IsSuccessStatusCode)
                {
                    _tournament = await Http.GetFromJsonAsync<TournamentModel>($"/api/Tournament/{Id}");
                    _matches = _tournament?.Matches.OrderBy(x => !x.IsLocked).ThenBy(x => x.Round).ThenBy(x => x.Order).ToList() ?? new();
                }
            }
            var res = await Http.PutAsJsonAsync("/api/Match/generate", lockedMatches);
            if (res.IsSuccessStatusCode)
            {
                _generatingMoreMatches = false;
                _generateMoreMatches = false;
                await OnInitializedAsync();
            }
            
            _editedMatches = new();
        }
    }

    private void CheckTeamIsInMultipleMatches()
    {
        if (_matches is null)
        {
            _teamIsInMultipleMatches = false;
            return;
        }

        _teamIsInMultipleMatches = _matches.Any(
            match => _matches
                .Where(x => x.Round == match.Round && x.Id != match.Id)
                .Any(x => x.Team1Id == match.Team1Id || x.Team2Id == match.Team1Id || x.Team1Id == match.Team2Id || x.Team2Id == match.Team2Id)
            );
    }
    private bool _teamIsInMultipleMatches;

    private async Task ChooseWinner(MatchModel match)
    {
        if (_tournament != null && _approvedParticipants is not null)
        {
            var proposedWinner = match.Score1 >= match.Score2 ? match.Team1Id : match.Team2Id;
            if (proposedWinner != null)
            {
                var parameters = new ModalParameters()
                    .Add(nameof(ChooseWinnerModal.Participants), _approvedParticipants)
                    .Add(nameof(ChooseWinnerModal.ProposedWinner), proposedWinner);
    
                var res = await Modal.Show<ChooseWinnerModal>("Choose a winner", parameters).Result;
                if (res.Confirmed)
                {
                    _tournament.WinnerTeamId = res.Data as Guid?;
                    var result = await Http.PutAsJsonAsync("/api/Tournament", _tournament);
                    if (!result.IsSuccessStatusCode)
                    {
                        _resultOk = false;
                        _errorMessage = "Unable to choose the winner";
                    }
                    else
                    {
                        Navigation.NavigateTo("/Tournament/List");
                    }
                }
            }
        }
    }
}
