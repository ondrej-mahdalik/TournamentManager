@page "/Tournament/Manage/{Id}"
@using TournamentManager.Common.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Manage Tournament</PageTitle>

<div id="wrapper">
<div class="d-flex flex-column" id="content-wrapper">
<div id="content">
<div class="container-fluid">
<div class="row mb-3">
    <div class="col d-xl-flex d-flex align-items-center">
        <h3 class="text-dark d-xl-flex">@_tournament?.Name</h3>
    </div>
    <div class="col col-auto"><a href="/Tournament/List"><button class="btn btn-light" type="button">Back to All Tournaments</button></a></div>
    @if (_loggedUser is not null && _loggedUser.Id == _tournament?.CreatorId)
    {
        <div class="col col-auto d-flex align-items-center"><button class="btn btn-danger" @onclick="DeleteTournament" type="button">Delete Tournament</button></div>
    }
    
    @if (_tournament is not null && _tournament.IsApproved && _loggedUser?.Id == _tournament?.CreatorId && 
         !_tournament!.InProgress && _approvedParticipants?.Count > 1)
    {
        <div class="col col-auto d-flex align-items-center"><button class="btn btn-success" @onclick="StartTournament" type="button">Start Tournament</button></div>
    }
</div>
<div class="row mb-4">
    @if (!_resultOk)
    {
        <p class="text-danger"><i class="fas fa-exclamation-circle pe-0 me-1"></i>@_errorMessage</p>
    }
    <div class="col">
        <div class="card shadow mb-4">
            <div class="card-header">
                <h6 class="text-primary mb-0">Pending sign-ups</h6>
            </div>
            <div class="card-body">
                @if (_pendingParticipants is null)
                {
                    <p class="text-center fw-bold">Loading...</p>
                }
                else
                {
                    <div class="row">
                        <div class="col-md-6 text-nowrap">
                            <div id="dataTable_length" class="dataTables_length" aria-controls="dataTable">
                                <label class="form-label">Show&nbsp;
                                    <select @onchange="OnItemsOnPageChanged" class="d-inline-block form-select form-select-sm">
                                        <option value="10" selected="selected">10</option>
                                        <option value="25">25</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                    </select>&nbsp;
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="text-md-end dataTables_filter" id="dataTable_filter"><label class="form-label"><input type="search" @oninput="OnSearchQueryChanged" class="form-control form-control-sm" aria-controls="dataTable" placeholder="Search"></label></div>
                        </div>
                    </div>
                    <div class="table-responsive table mt-2" id="dataTable-1" role="grid" aria-describedby="dataTable_info">
                        @if (PendingParticipantsFiltered.Count == 0)
                        {
                            <p class="text-center fw-bold">No pending participants found</p>
                        }
                        else
                        {
                            <table class="table my-0" id="dataTable">
                                <thead>
                                <tr>
                                    <th>Team Name</th>
                                    <th>Team Leader</th>
                                    <th>Date Registered</th>
                                    <th>Actions</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var participant in PendingParticipantsFilteredPages[_selectedPageIndex])
                                {
                                    var leader = _teamLeaders?.Where(x => x.Id == participant.Team?.LeaderId).ToList()[0];
                                    <tr>
                                        <td>@participant.Team?.Name</td>
                                        <td>@leader?.FirstName @leader?.LastName</td>
                                        <td>Datum registrace?</td>
                                        <td class="text-center"><i @onclick="() => ApproveParticipant(participant)" class="fas fa-user-check me-1" data-bs-toggle="tooltip" data-bss-tooltip="" data-bs-placement="right" title="Approve participant"></i><i @onclick="() => DeleteParticipant(participant)" class="fas fa-user-times" data-bs-toggle="tooltip" data-bss-tooltip="" data-bs-placement="right" title="Reject participant"></i></td>
                                    </tr>
                                }
                                </tbody>
                                <tfoot>
                                <tr></tr>
                                </tfoot>
                            </table>
                        }
                    </div>
                    <div class="row">
                        @if (PendingParticipantsFiltered.Count > 0)
                        {
                            <div class="col-md-6 align-self-center">
                                <p id="dataTable_info" class="dataTables_info" role="status" aria-live="polite">Showing @(1 + _selectedPageIndex * _showCount) to @((_showCount + _selectedPageIndex * _showCount) < PendingParticipantsFiltered.Count ? (_showCount + _selectedPageIndex * _showCount) : PendingParticipantsFiltered.Count) of @(PendingParticipantsFiltered.Count)</p></div>
                            <div class="col-md-6">
                                <nav class="d-lg-flex justify-content-lg-end dataTables_paginate paging_simple_numbers">
                                    <ul class="pagination">
                                        <li class="page-item @(_selectedPageIndex <= 0 ? "disabled" : "")"><a role="button" class="page-link" aria-label="Previous" @onclick="() => _selectedPageIndex--"><span class="user-select-none" aria-hidden="true">«</span></a></li>
                                        @for (var i = _selectedPageIndex - 1; i <= _selectedPageIndex + 1; i++)
                                        {
                                            var num = i;
                                            if (_selectedPageIndex == 0)
                                                num = i + 1; // So user cant go to page -1

                                            else if (_selectedPageIndex >= PendingParticipantsFilteredPages.Count - 1)
                                                num = i - 1; // So user cant go to a page that is too high

                                            if (num > PendingParticipantsFilteredPages.Count - 1)
                                            {
                                                break; // If there are fewer than 3 pages total
                                            }
                                            if (_selectedPageIndex == 1 && PendingParticipantsFilteredPages.Count == 2 && i == 0)
                                            {
                                                // If only 2 pages are available, clicking the second one would make page 0 appear
                                                // which is obviously not possible
                                                continue;
                                            }

                                            <li class="page-item @(_selectedPageIndex == num ? "active" : "")">
                                                <a class="page-link" @onclick="() => _selectedPageIndex = num" role="button">@(num + 1)</a>
                                            </li>
                                        }
                                        <li class="page-item @(_selectedPageIndex >= @PendingParticipantsFilteredPages.Count - 1 ? "disabled" : "")">
                                            <a class="page-link" aria-label="Next" @onclick="() => _selectedPageIndex++" role="button"><span class="user-select-none" aria-hidden="true">»</span></a>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col">
        <div class="card shadow mb-4">
            <div class="card-header">
                <h6 class="text-primary mb-0">Participants</h6>
            </div>
            <div class="card-body">
                @if (_approvedParticipants is null)
                {
                    <p class="text-center fw-bold">Loading...</p>
                }
                else
                {
                    <div class="row">
                        <div class="col-md-6 text-nowrap">
                            <div id="dataTable_length" class="dataTables_length" aria-controls="dataTable">
                                <label class="form-label">Show&nbsp;
                                    <select @onchange="OnItemsOnPageChanged2" class="d-inline-block form-select form-select-sm">
                                        <option value="10" selected="selected">10</option>
                                        <option value="25">25</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                    </select>&nbsp;
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="text-md-end dataTables_filter" id="dataTable_filter"><label class="form-label"><input type="search" @oninput="OnSearchQueryChanged2" class="form-control form-control-sm" aria-controls="dataTable" placeholder="Search"></label></div>
                        </div>
                    </div>
                    <div class="table-responsive table mt-2" id="dataTable-1" role="grid" aria-describedby="dataTable_info">
                        @if (ApprovedParticipantsFiltered.Count == 0)
                        {
                            <p class="text-center fw-bold">No participants found</p>
                        }
                        else
                        {
                            <table class="table my-0" id="dataTable">
                                <thead>
                                <tr>
                                    <th>Team Name</th>
                                    <th>Team Leader</th>
                                    <th>Date Registered</th>
                                    <th>Actions</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var participant in ApprovedParticipantsFilteredPages[_selectedPageIndex2])
                                {
                                    var leader = _teamLeaders?.Where(x => x.Id == participant.Team?.LeaderId).ToList()[0];
                                    <tr>
                                        <td>@participant.Team?.Name</td>
                                        <td>@leader?.FirstName @leader?.LastName</td>
                                        <td>Datum registrace?</td>
                                        <td class="text-center"><i @onclick="() => DeleteParticipant(participant)" class="fas fa-user-times" data-bs-toggle="tooltip" data-bss-tooltip="" data-bs-placement="right" title="Reject participant"></i></td>
                                    </tr>
                                }
                                </tbody>
                                <tfoot>
                                <tr></tr>
                                </tfoot>
                            </table>
                        }
                    </div>
                    <div class="row">
                        @if (_approvedParticipants.Count > 0)
                        {
                            <div class="col-md-6 align-self-center">
                                <p id="dataTable_info" class="dataTables_info" role="status" aria-live="polite">Showing @(1 + _selectedPageIndex2 * _showCount2) to @((_showCount2 + _selectedPageIndex2 * _showCount2) < ApprovedParticipantsFiltered.Count ? (_showCount2 + _selectedPageIndex2 * _showCount2) : ApprovedParticipantsFiltered.Count) of @(ApprovedParticipantsFiltered.Count)</p></div>
                            <div class="col-md-6">
                                <nav class="d-lg-flex justify-content-lg-end dataTables_paginate paging_simple_numbers">
                                    <ul class="pagination">
                                        <li class="page-item @(_selectedPageIndex2 <= 0 ? "disabled" : "")"><a role="button" class="page-link" aria-label="Previous" @onclick="() => _selectedPageIndex2--"><span class="user-select-none" aria-hidden="true">«</span></a></li>
                                        @for (var i = _selectedPageIndex2 - 1; i <= _selectedPageIndex2 + 1; i++)
                                        {
                                            var num = i;
                                            if (_selectedPageIndex2 == 0)
                                                num = i + 1; // So user cant go to page -1

                                            else if (_selectedPageIndex2 >= ApprovedParticipantsFilteredPages.Count - 1)
                                                num = i - 1; // So user cant go to a page that is too high

                                            if (num > ApprovedParticipantsFilteredPages.Count - 1)
                                            {
                                                break; // If there are fewer than 3 pages total
                                            }
                                            if (_selectedPageIndex2 == 1 && ApprovedParticipantsFilteredPages.Count == 2 && i == 0)
                                            {
                                                // If only 2 pages are available, clicking the second one would make page 0 appear
                                                // which is obviously not possible
                                                continue;
                                            }

                                            <li class="page-item @(_selectedPageIndex2 == num ? "active" : "")">
                                                <a class="page-link" @onclick="() => _selectedPageIndex2 = num" role="button">@(num + 1)</a>
                                            </li>
                                        }
                                        <li class="page-item @(_selectedPageIndex2 >= @ApprovedParticipantsFilteredPages.Count - 1 ? "disabled" : "")">
                                            <a class="page-link" aria-label="Next" @onclick="() => _selectedPageIndex2++" role="button"><span class="user-select-none" aria-hidden="true">»</span></a>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col">
        <h4 class="text-center text-primary"><span style="color: rgba(var(--bs-primary-rgb), var(--bs-text-opacity)) ;">Tournament Matches</span><br></h4>
    </div>
</div>
<div class="row">
    @if (_matches is null)
    {
        <p class="text-center fw-bold">Loading...</p>
    }
    else if (_matches.Count == 0)
    {
        <p class="text-center fw-bold">@_message</p>
    }
    else
    {
        foreach (var match in _matches)
        {
            <div class="col-4">
                <div class="card mb-4 shadow">
                    <div class="card-body">
                        <div class="row">
                            <div class="col">
                                <h6 class="text-primary">Round @match.Round</h6>
                            </div>
                            <div class="col">
                                <p>Zatím @_tournament?.Date.ToString("dd. MM. yyyy")<br></p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <p>
                                    @if (match?.Team1?.LogoUrl is not null || match?.Team1?.LogoUrl != "")
                                    {
                                        <img alt="team1-image" class="img-fluid" width="60" height="60" src="@match?.Team1?.LogoUrl">
                                    }                                                                                           
                                    @match?.Team1?.Name
                                </p>
                            </div>
                            <div class="col align-self-center">
                                <p class="lead text-center">@match?.Score1</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <p>
                                    @if (match?.Team2?.LogoUrl is not null || match?.Team2?.LogoUrl != "")
                                    {
                                        <img alt="team2-image" class="img-fluid" width="60" height="60" src="@match?.Team2?.LogoUrl">
                                    }                                                                                           
                                    @match?.Team2?.Name
                                </p>
                            </div>
                            <div class="col align-self-center">
                                <p class="lead text-center">@match?.Score2</p>
                            </div>
                        </div>
                        <div class="row justify-content-end">
                            <div class="col col-auto"><button class="btn btn-primary" type="button">Manage</button></div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>
</div>
</div>
</div>
</div>

@code {

    [Parameter]
    public string? Id { get; set; }

    private TournamentModel? _tournament;
    private UserModel? _loggedUser;
    private List<MatchModel>? _matches;
    private List<TeamIsParticipatingModel>? _approvedParticipants;
    private List<TeamIsParticipatingModel>? _pendingParticipants;
    private List<UserModel>? _teamLeaders;
    private int _showCount = 10;
    private int _showCount2 = 10;
    private int _selectedPageIndex;
    private int _selectedPageIndex2;
    private string _message = "Tournament has no matches";
    private string _searchPending = "";
    private string _searchApproved = "";
    
    private bool _resultOk = true;
    private string _errorMessage = String.Empty;

    private List<TeamIsParticipatingModel> PendingParticipantsFiltered => _pendingParticipants?
        .Where(x =>
        {
            var name = x.Team != null && x.Team.Name.ToLower().Contains(_searchPending.ToLower());
            return name;
        }).ToList() ??
    new ();
    
    private List<TeamIsParticipatingModel> ApprovedParticipantsFiltered => _approvedParticipants?
        .Where(x =>
        {
            var name = x.Team != null && x.Team.Name.ToLower().Contains(_searchApproved.ToLower());
            return name;
        }).ToList() ?? new ();
    
    private List<List<TeamIsParticipatingModel>> ApprovedParticipantsFilteredPages => ApprovedParticipantsFiltered.Select((x, i) => new  // Splits the one big list into smaller lists of size _showCount
    {
        Index = i,
        Value = x
    }).GroupBy(x => x.Index / _showCount)
        .Select(x => x.Select(v => v.Value).ToList())
        .ToList();
    
    private List<List<TeamIsParticipatingModel>> PendingParticipantsFilteredPages => PendingParticipantsFiltered.Select((x, i) => new  // Splits the one big list into smaller lists of size _showCount
    {
        Index = i,
        Value = x
    }).GroupBy(x => x.Index / _showCount)
        .Select(x => x.Select(v => v.Value).ToList())
        .ToList();
    

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _tournament = await Http.GetFromJsonAsync<TournamentModel>($"/api/Tournament/{Id}");
            _matches = _tournament?.Matches.OrderBy(x => x.Round).ToList() ?? new();
            var allParticipants = await Http.GetFromJsonAsync<List<TeamIsParticipatingModel>>("/api/TeamIsParticipating") ?? new();
            _approvedParticipants = allParticipants.Where(x => x.TournamentId == _tournament?.Id && x.Approved).ToList();
            _pendingParticipants = allParticipants.Where(x => x.TournamentId == _tournament?.Id && !x.Approved).ToList();
            _teamLeaders = new();
            
            foreach (var participant in allParticipants)
            {
                var teamLeaderId = (await Http.GetFromJsonAsync<TeamModel>($"/api/Team/{participant.TeamId}"))?.LeaderId;
                if (teamLeaderId is null) continue;
                
                var teamLeader = await Http.GetFromJsonAsync<UserModel>($"/api/User/{teamLeaderId}");
                if (teamLeader is not null)
                {
                    _teamLeaders.Add(teamLeader);
                }
            }



            _loggedUser = await Http.GetFromJsonAsync<UserModel>("/api/User/current");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task DeleteTournament()
    {
        try
        {
            if (_tournament is not null && !_tournament.InProgress)
            {
                var result = await Http.DeleteAsync($"/api/Tournament/{_tournament.Id}");
                if (result.IsSuccessStatusCode)
                {
                    Navigation.NavigateTo("/Tournament/List");
                    _errorMessage = "";
                }
                else
                {
                    _resultOk = false;
                    _errorMessage = "Unable to delete the tournament.";
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task ApproveParticipant(TeamIsParticipatingModel? participant)
    {
        if (participant is not null && _tournament is not null && !_tournament.InProgress)
        {
            participant.Approved = true;
            var result = await Http.PutAsJsonAsync("/api/TeamIsParticipating", participant);
            if (!result.IsSuccessStatusCode)
            {
                participant.Approved = false;
                _resultOk = false;
                _errorMessage = "Unable to approve the participant.";
            }
            else
            {
                _resultOk = true;
                _errorMessage = "";
                _pendingParticipants?.Remove(participant);
                _approvedParticipants?.Add(participant);
            }
        }
    }

    private async Task DeleteParticipant(TeamIsParticipatingModel? participant)
    {
        if (participant is not null && _tournament is not null && !_tournament.InProgress)
        {
            try
            {
                var result = await Http.DeleteAsync($"/api/TeamIsParticipating/{participant.Id}");
                if (result.IsSuccessStatusCode)
                {
                    _pendingParticipants?.Remove(participant);
                    _approvedParticipants?.Remove(participant);
                    _resultOk = true;
                    _errorMessage = "";
                }
                else
                {
                    _resultOk = false;
                    _errorMessage = "Unable to delete the participant.";
                }

            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }

    private async Task StartTournament()
    {
        if (_tournament is not null)
        {
            _tournament.InProgress= true;
            var result = await Http.PutAsJsonAsync("/api/Tournament", _tournament);
            if (!result.IsSuccessStatusCode)
            {
                _tournament.InProgress = false;
                _resultOk = false;
                _errorMessage = "Unable to start the tournament";
            }
            else
            {
                _resultOk = true;
                _errorMessage = "";
                CreateMatches();
            }
        }
    }

    private async void CreateMatches()
    {
        _message = "Generating matches...";
        var matchesToGenerate = new List<MatchModel>();
        if (_approvedParticipants is null || _tournament is null) return;
        
        List<TeamIsParticipatingModel> randomOrderParticipants = _approvedParticipants.GetRange(0, _approvedParticipants.Count)
            .OrderBy(i => Guid.NewGuid()).ToList(); // Randomize the order of the participants

        var matchesInFirstRound = randomOrderParticipants.Count - Math.Pow(2, Math.Floor(Math.Log2(randomOrderParticipants.Count)));
        var order = 1;
        if (matchesInFirstRound == 0)
        {
            for (var i = 0; i < randomOrderParticipants.Count; i += 2)
            {
                MatchModel match = new MatchModel(_tournament.Id, 0, 0, 1, order++)
                {
                    Team1Id = randomOrderParticipants[i].TeamId,
                    Team2Id = randomOrderParticipants[i+1].TeamId
                };
                matchesToGenerate.Add(match);
            }
        }
        else
        {
            var i = 0;
            for (; i < matchesInFirstRound * 2; i += 2)
            {
                MatchModel match = new MatchModel(_tournament.Id, 0, 0, 1, order++)
                {
                    Team1Id = randomOrderParticipants[i].TeamId,
                    Team2Id = randomOrderParticipants[i + 1].TeamId
                };
                var result = await Http.PutAsJsonAsync("/api/Match", match);
                if (!result.IsSuccessStatusCode)
                {
                    return;
                }
            }
            order = 1;
            for (; i < randomOrderParticipants.Count; i += 2)
            {
                MatchModel match = new MatchModel(_tournament.Id, 0, 0, 2, order++)
                {
                    Team1Id = randomOrderParticipants[i].TeamId,
                    Team2Id = i + 1 < randomOrderParticipants.Count ? randomOrderParticipants[i+1].TeamId : null
                };
                matchesToGenerate.Add(match);
            }
        }
        
        var response = await Http.PutAsJsonAsync("/api/Match/multiple", matchesToGenerate);
        if (!response.IsSuccessStatusCode)
        {
            _resultOk = false;
            _errorMessage = "Unable to generate matches";
        }
        else
        {
            _resultOk = true;
            _errorMessage = "";
        }

        _matches = (await Http.GetFromJsonAsync<TournamentModel>($"/api/Tournament/{_tournament.Id}"))?.Matches.OrderBy(x => x.Round).ToList() ?? new();
        StateHasChanged();
    }
     
    private void OnItemsOnPageChanged(ChangeEventArgs e)
    {
        _selectedPageIndex = 0;
        _showCount = int.Parse(e.Value?.ToString() ?? "10");
    }
    
    private void OnItemsOnPageChanged2(ChangeEventArgs e)
    {
        _selectedPageIndex2 = 0;
        _showCount2 = int.Parse(e.Value?.ToString() ?? "10");
    }

    private void OnSearchQueryChanged(ChangeEventArgs e)
    {
        _searchPending = e.Value?.ToString() ?? "";
        _selectedPageIndex = 0;
    }
    
    private void OnSearchQueryChanged2(ChangeEventArgs e)
    {
        _searchApproved = e.Value?.ToString() ?? "";
        _selectedPageIndex2 = 0;
    }



}
