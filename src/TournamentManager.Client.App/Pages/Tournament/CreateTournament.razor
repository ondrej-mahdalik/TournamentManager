@page "/Tournament/Create"
@using TournamentManager.Common.Models
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Create Tournament</PageTitle>



<div class="row mb-3">
    <div class="col d-xl-flex d-flex align-items-center">
        <h3 class="text-dark d-xl-flex">New Tournament</h3>
    </div>
    <div class="col col-auto"><a href="/Tournament/List"><button class="btn btn-light" type="button">Back to All Tournaments</button></a></div>
</div>
<div class="row w-75">
    <div class="col">
        <div class="card m-2">
            <div class="card-body">
                <div class="row">
                    <div class="col">
                        <EditForm Model="@_model" OnValidSubmit="@HandleValidSubmit">
                            <DataAnnotationsValidator/>
                            <ValidationSummary/>
                            <div class="mb-2"><label class="form-label" for="name">Name</label><InputText id="name" name="name" class="form-control" type="text" @bind-Value="_model.Name"/></div>
                            <div class="mb-2"><label class="form-label" for="description" >Description (optional)</label><InputTextArea id="description" name="description" @bind-Value="_model.Description" class="form-control"/></div>
                            <div class="mb-2"><label class="form-label" for="date" >Date of beginning</label><InputDate TValue="DateTime" id="date" name="date" class="form-control" @bind-Value="_model.Date" Type="InputDateType.Date"></InputDate></div>
                            <div class="mb-2"><label class="form-label" for="sport">Sport</label>
                                <InputSelect TValue="Guid?" id="sport" name="sport" class="form-select" @bind-Value="_model.SportId">
                                    @foreach(var sport in _sports)
                                    {
                                        <option value="@sport.Id">@sport.Name</option>
                                    }
                                    <option value="" selected>Other</option>
                                </InputSelect>
                            </div>
                            <div class="mb-2"><label class="form-label" for="signup-type">Play mode</label>
                                <select id="signup-type" name="signup-type" class="form-select">
                                    <option value="12" selected>Individual</option>
                                    <option value="13">Teams</option>
                                </select>
                            </div>
                            <div class="mb-2"><label class="form-label" for="max-players">Maximum number of players</label><InputNumber TValue="int" id="max-players" name="max-players" @bind-Value="_model.MaxAttendees" class="form-control" min="1" type="number" style="width: 30%;"></InputNumber></div>
                            <div class="mb-2">
                                <div class="form-check"><label class="form-check-label" for="formCheck-1">Public</label><InputCheckbox class="form-check-input" type="checkbox" id="formCheck-1" @bind-Value="_model.IsPublic"></InputCheckbox></div>
                            </div>
                            <div class="d-xl-flex justify-content-xl-end"><button class="btn btn-primary text-end d-xl-flex" type="submit">Create</button></div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    private List<SportModel> _sports = new();
    private TournamentModel _model = TournamentModel.Empty;

    private async Task HandleValidSubmit()
    {
        _model.CreatorId = (await Http.GetFromJsonAsync<UserModel>("api/User/current"))?.Id;
        var result = await Http.PutAsJsonAsync("api/Tournament", _model);
        // TODO Handle unsuccessful result
        
        Navigation.NavigateTo("/Tournament/List");
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _sports = await Http.GetFromJsonAsync<List<SportModel>>("api/Sport") ?? new List<SportModel>();
    }
}
