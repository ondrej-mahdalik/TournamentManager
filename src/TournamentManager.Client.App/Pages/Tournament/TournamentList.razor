@page "/Tournament/List"
@using TournamentManager.Common.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Tournaments List</PageTitle>

<div id="content">
    <div class="container-fluid">
        <div class="row mb-3">
            <div class="col d-xl-flex d-flex align-items-center">
                <h3 class="text-dark d-xl-flex">Tournaments</h3>
            </div>
            <div class="col col-auto d-flex align-items-center"><a href="Tournament/Create"><button class="btn btn-primary" type="button">Create New</button></a></div>
        </div>
        <div class="card shadow">
            <div class="card-body">
                @if (_tournaments is null)
                {
                    <p class="text-center fw-bold">Loading...</p>
                }
                else
                {
                    <div class="row">
                        <div class="col-md-6 text-nowrap">
                            <div id="dataTable_length" class="dataTables_length" aria-controls="dataTable">
                                <label class="form-label">Show
                                    <select @onchange="OnItemsOnPageChanged" class="d-inline-block form-select form-select-sm">
                                        <option value="10" selected="selected">10</option>
                                        <option value="25">25</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                    </select>
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="text-md-end dataTables_filter" id="dataTable_filter">
                                <label class="form-label">
                                    <input type="text" @bind="@_search" @bind:event="oninput" class="form-control form-control-sm" placeholder="Search"/>
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive table mt-2" role="grid">
                        @if (TournamentsFiltered.Count == 0)
                        {
                            <p class="text-center fw-bold">No tournaments found</p>
                        }
                        else
                        {
                            <table class="table my-0" id="dataTable">
                                <thead>
                                <tr>
                                    <th>Sport<i class="fas fa-baseball-ball pe-0 ms-2"></i></th>
                                    <th>Name</th>
                                    <th>Date</th>
                                    <th>Visibility</th>
                                    <th>Occupation</th>
                                    <th>Winner</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var tournament in TournamentsFilteredPages[_selectedPageIndex])
                                {

                                    <tr>
                                        <td>@tournament.Sport?.Name</td>
                                        <td>@tournament.Name</td>
                                        <td>@tournament.Date.ToString("dd. MM. yyyy")</td>
                                        <td>@(tournament.IsPublic ? "Public" : "Private")</td>
                                        <td>@tournament.Participatings.Count / @tournament.MaxAttendees</td>
                                        <td class="text-end"><a data-bs-target="/Tournament/@tournament.Id" href="/Tournament/Detail/@tournament.Id"><button class="btn btn-primary" type="button">Detail</button></a></td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        }
                    </div>
                    <div class="row">
                        @if (TournamentsFiltered.Count > 0)
                        {
                            <div class="col-md-6 align-self-center">
                                <p id="dataTable_info" class="dataTables_info" role="status" aria-live="polite">Showing @(1 + _selectedPageIndex * _showCount) to @((_showCount + _selectedPageIndex * _showCount) < TournamentsFiltered.Count ? (_showCount + _selectedPageIndex * _showCount) : TournamentsFiltered.Count) of @(TournamentsFiltered.Count)</p>
                            </div>

                            <div class="col-md-6">
                                <nav class="d-lg-flex justify-content-lg-end dataTables_paginate paging_simple_numbers">
                                    <ul class="pagination">
                                        <li class="page-item @(_selectedPageIndex <= 0 ? "disabled" : "")"><a role="button" class="page-link" aria-label="Previous" @onclick="() => _selectedPageIndex--"><span class="user-select-none" aria-hidden="true">«</span></a></li>
                                        @for (var i = _selectedPageIndex - 1; i <= _selectedPageIndex + 1; i++)
                                        {
                                            var num = i;
                                            if (_selectedPageIndex == 0)
                                                num = i + 1; // So user cant go to page -1

                                            else if (_selectedPageIndex >= TournamentsFilteredPages.Count - 1)
                                                num = i - 1; // So user cant go to a page that is too high

                                            if (num > TournamentsFilteredPages.Count - 1)
                                            {
                                                break; // If there are fewer than 3 pages total
                                            }
                                            if (_selectedPageIndex == 1 && TournamentsFilteredPages.Count == 2 && i == 0)
                                            {
                                                // If only 2 pages are available, clicking the second one would make page 0 appear
                                                // which is obviously not possible
                                                continue;
                                            }

                                            <li class="page-item @(_selectedPageIndex == num ? "active" : "")">
                                                <a class="page-link" @onclick="() => _selectedPageIndex = num" role="button">@(num + 1)</a>
                                            </li>
                                        }
                                        <li class="page-item @(_selectedPageIndex >= @TournamentsFilteredPages.Count - 1 ? "disabled" : "")">
                                            <a class="page-link" aria-label="Next" @onclick="() => _selectedPageIndex++" role="button"><span class="user-select-none" aria-hidden="true">»</span></a>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>
@code
{
    private string _search = "";
    private int _showCount = 10;
    private int _selectedPageIndex;
    private List<TournamentModel>? _tournaments;
    private List<TournamentModel> TournamentsFiltered => _tournaments?
        .Where(x =>
        {
            var name = x.Name.ToLower().Contains(_search.ToLower());
            var sport = x.Sport?.Name.ToLower().Contains(_search.ToLower()) ?? false;
            var date = x.Date.ToString("dd. MM. yyyy").Contains(_search);
            var creatorFirstName = x.Creator?.FirstName?.ToLower().Contains(_search.ToLower()) ?? false;
            var creatorLastName = x.Creator?.LastName?.ToLower().Contains(_search.ToLower()) ?? false;
            
            return name || sport || date || creatorFirstName || creatorLastName;
        }).ToList()
        ?? new();
    
    private List<List<TournamentModel>> TournamentsFilteredPages => TournamentsFiltered.Select((x, i) => new  // Splits the one big list into smaller lists of size _showCount
    {
        Index = i,
        Value = x
    }).GroupBy(x => x.Index / _showCount)
        .Select(x => x.Select(v => v.Value).ToList())
        .ToList();
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _tournaments = await Http.GetFromJsonAsync<List<TournamentModel>>("api/Tournament") ?? new List<TournamentModel>();

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        
    }

    private void OnItemsOnPageChanged(ChangeEventArgs e)
    {
        _selectedPageIndex = 0;
        _showCount = int.Parse(e.Value?.ToString() ?? "10");
    }
}