@*
Author: Jan Vaclavik (xvacla35)
*@

@using TournamentManager.Common.Enums
@inject HttpClient Http

@if (_teams is not null && _teams.Count > 0)
{
    <div class="row mb-2">
        <div class="col">
            @if (!_resultOk)
            {
                <MessageBox MessageType="MessageType.Error" Title="Error" Message="Select a team first" ShowCloseButton="false"></MessageBox>
            }
            <div class="mb-2"><label class="form-label" for="team">Select a team</label>
                <select @bind="_selectedTeamId" class="form-select" id="team" name="team">
                    @foreach (var team in _teams)
                    {
                        <option value="@team.Id">@team.Name</option>
                    }
                </select>
            </div>
        </div>
    </div>
}
else
{
    <MessageBox MessageType="MessageType.Warning" Title="Warning" Message="You are not leading any teams" ShowCloseButton="true"></MessageBox>
}
<div class="d-flex justify-content-end">
    <button class="btn btn-danger text-end d-flex me-1" @onclick="CancelAsync">Cancel</button>
    @if (_teams is not null && _teams.Count != 0)
    {
        <button class="btn btn-primary text-end d-flex" @onclick="ParticipateAsync">Participate</button>
    }
</div>

@code {
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public UserModel CurrentUser { get; set; } = default!;

    private List<TeamModel>? _teams;
    private bool _resultOk = true;
    
    private Guid? _selectedTeamId;

    protected override async Task OnInitializedAsync()
    {
        _teams = await Http.GetFromJsonAsync<List<TeamModel>>($"api/Team/ByUser/{CurrentUser.Id}");
    }

    private async Task ParticipateAsync()
    {
        if (_selectedTeamId is null)
        {
            _resultOk = false;
        }
        else
        {
            _resultOk = true;
            var team = _teams?.FirstOrDefault(x => x.Id == _selectedTeamId);
            await BlazoredModal.CloseAsync(ModalResult.Ok(team));
        }
    }
    
    private async Task CancelAsync()
    {
        await BlazoredModal.CloseAsync(ModalResult.Cancel());
    }
}